from fastapi import APIRouter, Form, Depends
from fastapi.responses import JSONResponse
from core.auth import get_current_user
from utils import call_agent_with_context, save_memory
from core.mcp import load_context, save_context, merge_contexts
from utils import load_meta
from pathlib import Path
import asyncio, json, logging

logger = logging.getLogger("brainstorm")
router = APIRouter()

@router.post("/brainstorm")
async def brainstorm(
    folder: str = Form(...),
    topic: str = Form(...),
    user: str = Depends(get_current_user)
):
    """
    üí° –†–µ–∂–∏–º –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∏–¥–µ–π (Brainstorm)
    –ö–∞–∂–¥—ã–π –∞–≥–µ–Ω—Ç –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∏–¥–µ–∏ –ø–æ —Ç–µ–º–µ, —É—á–∏—Ç—ã–≤–∞—è —Ä–æ–ª—å –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–ª–ª–µ–≥.
    """
    meta = load_meta()
    agents_in_folder = [
        a for a in meta
        if a.get("folder") == folder
        and not a.get("is_folder")
        and a.get("owner") == user
    ]
    if not agents_in_folder:
        return JSONResponse({"ok": False, "error": f"–ù–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ '{folder}'"}, status_code=404)

    # üß† –û–±—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    all_contexts = {a["slug"]: load_context(a["slug"]) for a in agents_in_folder}
    merged_context = merge_contexts(*all_contexts.values())
    context_text = json.dumps(merged_context, ensure_ascii=False, indent=2)

    results = []

    async def handle(agent):
        slug = agent["slug"]
        try:
            prompt = (
                f"üí° –ú–æ–∑–≥–æ–≤–æ–π —à—Ç—É—Ä–º –ø–æ —Ç–µ–º–µ:\n{topic}\n\n"
                f"üìò –ö–æ–Ω—Ç–µ–∫—Å—Ç—ã –∫–æ–ª–ª–µ–≥:\n{context_text}\n\n"
                f"–¢—ã ‚Äî {slug}. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –∏–¥–µ–∏, "
                f"–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ –∑–Ω–∞–Ω–∏—è—Ö –∫–æ–º–∞–Ω–¥—ã –∏ —Å–≤–æ–µ–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏."
            )
            res = await call_agent_with_context(agent, prompt)
            result_text = res.get("result") if isinstance(res, dict) else str(res)

            save_memory(Path(agent["path"]), {"task": f"Brainstorm: {topic}", "result": result_text})
            ctx = load_context(slug)
            ctx["brainstorm_topic"] = topic
            ctx["brainstorm_result"] = result_text
            ctx["colleague_contexts"] = list(all_contexts.keys())
            save_context(slug, ctx)

            results.append({"agent": slug, "result": result_text})
        except Exception as e:
            logger.exception(f"[brainstorm] –û—à–∏–±–∫–∞ —É –∞–≥–µ–Ω—Ç–∞ {slug}: {e}")
            results.append({"agent": slug, "error": str(e)})

    await asyncio.gather(*[handle(a) for a in agents_in_folder])
    return JSONResponse({"ok": True, "folder": folder, "topic": topic, "results": results})
