import sys
import os, re, shutil, markdown, logging
sys.path.append(os.path.dirname(__file__))

import asyncio
from pathlib import Path
import importlib.util
from fastapi import APIRouter, Request, Form, HTTPException, Request
from fastapi.responses import HTMLResponse, RedirectResponse, FileResponse, JSONResponse
from fastapi.templating import Jinja2Templates
from utils import load_meta, save_meta, call_agent_local, call_agent_remote, save_memory
from mcp import load_context, save_context



logger = logging.getLogger("manager")
router = APIRouter()

BASE = Path(__file__).resolve().parent.parent
AGENTS_DIR = BASE / "agents"
TEMPLATES_DIR = BASE / "templates"
templates = Jinja2Templates(directory=str(TEMPLATES_DIR))

def slugify(name: str):
    return re.sub(r"[^a-zA-Z0-9_-]", "_", name.strip()).lower()

@router.get("/", response_class=HTMLResponse)
async def index(request: Request): 
    meta = load_meta()

    root_folder_path = AGENTS_DIR / "root"
    root_folder_path.mkdir(exist_ok=True)
    if not any(a.get("is_folder") and a.get("folder") == "root" for a in meta):
        meta.append({
            "folder": "root", "is_folder": True, "name": "root", "slug": "folder_root",
            "created_at": __import__('datetime').datetime.utcnow().isoformat() + 'Z'
        })
        save_meta(meta)

    if not any(a.get("slug") == "assistant_default" for a in meta):
        default_path = root_folder_path / "assistant_default"
        default_path.mkdir(parents=True, exist_ok=True)
        (default_path / "bot.py").write_text(
            'def handle_task(task: str):\n'
            '    return f"ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ–ª—É—á–∏–ª –∑–∞–¥–∞—á—É: {task}"\n',
            encoding="utf-8"
        )
        meta.append({
            "name": "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç", "slug": "assistant_default", "folder": "root", "is_folder": False,
            "created_at": __import__('datetime').datetime.utcnow().isoformat() + 'Z',
            "path": str(default_path), "deploy_url": "", "status": "ready"
        })
        save_meta(meta)

    folders = {}
    agents_root = []
    for agent in meta:
        folder = agent.get("folder") or "root"
        if agent.get("is_folder"):
            folders.setdefault(folder, [])
        else:
            folders.setdefault(folder, []).append(agent)
            if folder == "root":
                agents_root.append(agent)

    return templates.TemplateResponse("index.html", {"request": request, "folders": folders, "agents": agents_root})

@router.get("/folder/{folder_name}")
async def get_folder_agents(folder_name: str):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏—Ö –∑–∞–¥–∞–Ω–Ω–æ–º—É –∫–∞—Ç–∞–ª–æ–≥—É.
    """
    meta = load_meta()
    folder_name = folder_name.strip().lower()

    agents = []
    # for a in meta:
    #     folder_value = (a.get("folder") or "root").strip().lower().rstrip("/")
    #     if folder_value == folder_name and not a.get("is_folder"):
    #         agents.append(a)
     # üß© –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤, —á—å—è folder == –Ω—É–∂–Ω–∞—è
    agents = [
        a for a in meta
        if not a.get("is_folder", False)
        and a.get("folder", "root") == folder_name
    ]

    return JSONResponse(agents)

@router.get("/agent/{slug}", response_class=HTMLResponse)
async def view_agent(request: Request, slug: str):
    meta = load_meta()
    agent = next((a for a in meta if a["slug"] == slug), None)
    if not agent:
        raise HTTPException(status_code=404, detail="Agent not found")
    bot_file = Path(agent["path"]) / "bot.py"
    prompt = ""
    if bot_file.exists():
        text = bot_file.read_text(encoding="utf-8")
        m = re.search(r'PROMPT\s*=\s*"""(.*?)"""', text, re.DOTALL)
        if m:
            prompt = m.group(1).strip()
    # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–∞–ø–æ–∫ –¥–ª—è –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
    folders = [a["folder"] for a in meta if a.get("is_folder")]

    return templates.TemplateResponse(
        "agent.html",
        {"request": request, "agent": agent, "prompt": prompt, "folders": folders}
    )

@router.post('/create_agent')
async def create_agent(
    request: Request,
    name: str = Form(...),
    prompt: str = Form(''),
    telegram_token: str = Form(''),
    folder: str = Form('root')
):
    name = name.strip()
    if not name:
        raise HTTPException(status_code=400, detail='Name required')

    slug = slugify(name)
    folder = folder.strip() or "root"
    dest = AGENTS_DIR / folder / slug

    meta = load_meta()

    # ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞: —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∞–≥–µ–Ω—Ç —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –∏–ª–∏ slug
    if any(a.get("slug") == slug or a.get("name").lower() == name.lower() for a in meta):
        return JSONResponse({"ok": False, "error": f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å –∏–º–µ–Ω–µ–º '{name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"})

    try:
        dest.mkdir(parents=True, exist_ok=False)
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∞–≥–µ–Ω—Ç–∞: %s", e)
        raise HTTPException(status_code=500, detail=str(e))

    # === –°–æ–∑–¥–∞–Ω–∏–µ bot.py ===
    template = (BASE / 'bot_template.py').read_text(encoding='utf-8')
    safe_prompt = prompt.replace('"""', '\"\"\"')
    worker_code = template.replace('__PROMPT_PLACEHOLDER__', f'"""{safe_prompt}"""')

    if telegram_token.strip():
        worker_code = worker_code.replace('__TELEGRAM_TOKEN_PLACEHOLDER__',
                                          f'TELEGRAM_TOKEN = "{telegram_token.strip()}"')
    else:
        worker_code = worker_code.replace('__TELEGRAM_TOKEN_PLACEHOLDER__',
                                          'TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")')

    (dest / 'bot.py').write_text(worker_code, encoding='utf-8')

    # –ö–æ–ø–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
    for fn in ['requirements.txt', '.env.example', 'README_worker.md']:
        src = BASE / 'agents' / fn
        if src.exists():
            shutil.copy(src, dest / fn)

    # === –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ agents.json ===
    entry = {
        "name": name,
        "slug": slug,
        "folder": folder,
        "is_folder": False,
        "created_at": __import__('datetime').datetime.utcnow().isoformat() + 'Z',
        "path": str(dest),
        "deploy_url": "",
        "status": "created"
    }
    meta.append(entry)
    save_meta(meta)

    # === Telegram webhook (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω) ===
    if telegram_token.strip():
        try:
            import requests, os as _os
            BASE_URL = _os.getenv("BASE_URL") or "https://your-domain.com"
            webhook_url = f"{BASE_URL.rstrip('/')}/agents/{folder}/{slug}/webhook"
            r = requests.get(
                f"https://api.telegram.org/bot{telegram_token}/setWebhook",
                params={"url": webhook_url},
                timeout=10
            )
            if r.status_code == 200 and r.json().get("ok"):
                entry["deploy_url"] = webhook_url
                save_meta(meta)
            else:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook: %s", r.text)
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ Telegram webhook: %s", e)

    return JSONResponse({"ok": True, "message": f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ '{name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω"})


@router.post("/update_agent/{slug}")
async def update_agent(
    request: Request,
    slug: str,
    name: str = Form(...),
    prompt: str = Form(''),
    telegram_token: str = Form(''),
    deploy_url: str = Form(''),
    folder: str = Form('')
):
    meta = load_meta()
    agent = next((a for a in meta if a["slug"] == slug), None)
    if not agent:
        raise HTTPException(status_code=404, detail="Agent not found")

    agent["name"] = name.strip()
    agent["deploy_url"] = deploy_url.strip()

    # üü¢ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—É—é –ø–∞–ø–∫—É, –µ—Å–ª–∏ –Ω–æ–≤–∞—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞
    new_folder = folder.strip() or agent.get("folder", "root")
    agent["folder"] = new_folder

    # –û–±–Ω–æ–≤–ª—è–µ–º bot.py (PROMPT –∏ TELEGRAM_TOKEN)
    bot_file = Path(agent["path"]) / "bot.py"
    if bot_file.exists():
        code = bot_file.read_text(encoding="utf-8")
        code = re.sub(r'PROMPT\s*=\s*""".*?"""', f'PROMPT = """{prompt.strip()}"""', code, flags=re.DOTALL)
        if telegram_token.strip():
            code = re.sub(r'TELEGRAM_TOKEN\s*=\s*.*', f'TELEGRAM_TOKEN = "{telegram_token.strip()}"', code)
        bot_file.write_text(code, encoding="utf-8")

    save_meta(meta)
    logger.info("–û–±–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∞–≥–µ–Ω—Ç–∞ %s", slug)
    return JSONResponse({"ok": True, "message": f"–û–±–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∞–≥–µ–Ω—Ç–∞ '{slug}'"})


@router.post("/create_folder")
async def create_folder(name: str = Form(...)):
    folder = name.strip()
    if not folder:
        return JSONResponse({"ok": False, "error": "empty_name"})
    folder_path = AGENTS_DIR / folder
    if folder_path.exists():
        return JSONResponse({"ok": False, "error": "exists"})
    folder_path.mkdir(parents=True, exist_ok=True)
    meta = load_meta()
    if not any(a.get("is_folder") and a.get("folder") == folder for a in meta):
        meta.append({"folder": folder, "is_folder": True, "name": folder,
                     "slug": f"folder_{folder}",
                     "created_at": __import__('datetime').datetime.utcnow().isoformat() + 'Z',})
        save_meta(meta)
    return JSONResponse({"ok": True, "folder": folder})

@router.post('/delete_agent')
async def delete_agent(slug: str = Form(...)):
    meta = load_meta()
    entry = next((e for e in meta if e['slug'] == slug), None)
    if not entry:
        raise HTTPException(status_code=404, detail='Not found')
    try:
        p = Path(entry['path'])
        if p.exists():
            shutil.rmtree(p)
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–≥–µ–Ω—Ç–∞: %s", e)
    meta = [e for e in meta if e['slug'] != slug]
    save_meta(meta)
    return JSONResponse({"ok": True, "message": f"–ê–≥–µ–Ω—Ç '{slug}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω"})

@router.post('/delete_folder')
async def delete_folder(name: str = Form(...)):
    """–£–¥–∞–ª—è–µ—Ç –∫–∞—Ç–∞–ª–æ–≥, –µ—Å–ª–∏ –æ–Ω –ø—É—Å—Ç–æ–π, –∏ –∑–∞–ø–∏—Å—å –∏–∑ agents.json"""
    folder = name.encode('latin1').decode('utf-8').strip()
    folder_path = AGENTS_DIR / folder
    if not folder_path.exists():
        raise HTTPException(status_code=404, detail="–ö–∞—Ç–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–≥–µ–Ω—Ç—ã –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ç–∞–ª–æ–≥–∞
    meta = load_meta()
    agents_in_folder = [a for a in meta if a.get("folder") == folder and not a.get("is_folder")]
    if agents_in_folder:
        return JSONResponse({"ok": False, "error": "not_empty", "count": len(agents_in_folder)})

    try:
        # –£–¥–∞–ª—è–µ–º –ø–∞–ø–∫—É —Å –¥–∏—Å–∫–∞
        shutil.rmtree(folder_path)

        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –æ –∫–∞—Ç–∞–ª–æ–≥–µ –∏ –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–∞—Ö –≤–Ω—É—Ç—Ä–∏ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
        new_meta = [a for a in meta if a.get("folder") != folder]
        save_meta(new_meta)

        logger.info(f"‚úÖ –£–¥–∞–ª—ë–Ω –∫–∞—Ç–∞–ª–æ–≥ '{folder}' –∏ –µ–≥–æ –∑–∞–ø–∏—Å—å –∏–∑ agents.json")
        return JSONResponse({"ok": True, "folder": folder})
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ {folder}: {e}")
        return JSONResponse({"ok": False, "error": str(e)}) 


@router.get('/download/{name}')
async def download(name: str):
    p = AGENTS_DIR / f"{name}.zip"
    if p.exists():
        return FileResponse(p, filename=p.name)
    raise HTTPException(status_code=404, detail='Not found')

def parse_llm_response(res):
    content = getattr(res, 'content', str(res))
    base64_images = re.findall(r"data:image\/[a-zA-Z]+;base64,[A-Za-z0-9+/=]+", content)
    import markdown2
    html_text = markdown2.markdown(content, safe_mode="escape")
    return {"html": html_text, "images": base64_images}

@router.post("/assign_task_folder")
async def assign_task_folder(task: str = Form(...), folder: str = Form(...)):
    """
    –ü–æ—Ä—É—á–∞–µ—Ç –∑–∞–¥–∞—á—É –≤—Å–µ–º –∞–≥–µ–Ω—Ç–∞–º –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –∫–∞—Ç–∞–ª–æ–≥–µ.
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç—ã —á–µ—Ä–µ–∑ parse_llm_response (–µ–¥–∏–Ω—ã–π —Å—Ç–∏–ª—å).
    """
    logger.info(f"–ü–æ—Ä—É—á–∞–µ–º –∑–∞–¥–∞—á—É '{task}' –≤—Å–µ–º –∞–≥–µ–Ω—Ç–∞–º –≤ –∫–∞—Ç–∞–ª–æ–≥–µ '{folder}'")

    meta = load_meta()
    if not meta:
        return JSONResponse({"ok": False, "error": "no_agents"})

    # –≤—ã–±–∏—Ä–∞–µ–º –∞–≥–µ–Ω—Ç–æ–≤ —Ç–æ–ª—å–∫–æ –∏–∑ –Ω—É–∂–Ω–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞
    agents_in_folder = [a for a in meta if a.get("folder") == folder and not a.get("is_folder")]
    if not agents_in_folder:
        return JSONResponse({"ok": False, "error": f"no_agents_in_folder_{folder}"})

    results = []

    async def handle(entry):
        slug = entry["slug"]
        try:
            path = Path(entry.get("path") or "")
            if not (path / "bot.py").exists():
                raise FileNotFoundError(f"bot.py –Ω–µ –Ω–∞–π–¥–µ–Ω —É –∞–≥–µ–Ω—Ç–∞ {slug}")

            # –í—ã–∑–æ–≤ –∞–≥–µ–Ω—Ç–∞
            res = await call_agent_local(path, task)

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ parse_llm_response (–µ–¥–∏–Ω—ã–π —Å—Ç–∏–ª—å)
            parsed = parse_llm_response(res["result"]) if isinstance(res, dict) and "result" in res else {"html": str(res), "images": []}
            logger.info(f"parsed result: {parsed}")
            entry["last_task"] = {"task": task, "result": parsed}
            lock = asyncio.Lock()
            async with lock:
                results.append({"agent": slug, "result": parsed})
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞–º—è—Ç—å –∞–≥–µ–Ω—Ç–∞
            try:
                save_memory(path, {
                    "date": __import__("datetime").datetime.utcnow().isoformat() + "Z",
                    "task": task,
                    "result": res.get("result") if isinstance(res, dict) else str(res)
                })
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ø–∞–º—è—Ç–∏ –∞–≥–µ–Ω—Ç–∞ {slug}: {e}")

        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Ä—É—á–µ–Ω–∏–∏ –∞–≥–µ–Ω—Ç—É {slug}: {e}")
            results.append({"agent": slug, "result": {"html": f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}", "images": []}})

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    await asyncio.gather(*[handle(a) for a in agents_in_folder])
    save_meta(meta)

    logger.info(f"–í—Å–µ –∞–≥–µ–Ω—Ç—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ '{folder}' –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏.")
    return JSONResponse({"ok": True, "folder": folder, "results": results})


@router.post("/assign_task")
async def assign_task(slug: str = Form(...), task: str = Form(...)):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é –∑–∞–¥–∞—á—É –∞–≥–µ–Ω—Ç—É –∏ –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON."""
    import traceback
    logger.info("–ù–∞–∑–Ω–∞—á–∞–µ–º –∑–∞–¥–∞—á—É '%s' –∞–≥–µ–Ω—Ç—É %s", task, slug)
    try:
        meta = load_meta()
        entry = next((e for e in meta if e["slug"] == slug), None)
        if not entry:
            raise HTTPException(status_code=404, detail="Worker not found")

        # --- –≤—ã–∑–æ–≤ –∞–≥–µ–Ω—Ç–∞ ---
        if entry.get("deploy_url"):
            res = await call_agent_remote(entry["deploy_url"], task)
        else:
            path = Path(entry.get("path") or "")
            if not path.exists():
                raise FileNotFoundError(f"–ü–∞–ø–∫–∞ –∞–≥–µ–Ω—Ç–∞ {path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            res = await call_agent_local(path, task)

        # --- –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–∞—Ä—Å–∏—Ä–æ–≤–∞–Ω–∏–µ ---
        parsed = parse_llm_response(res.get("result", str(res)) if isinstance(res, dict) else str(res))
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        ctx = load_context(slug)
        ctx["last_task"] = task
        ctx["last_result"] = parsed
        ctx["interaction_count"] = ctx.get("interaction_count", 0) + 1

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        save_context(slug, ctx)
        # return {"ok": True, "result": result, "context": ctx}
        entry["last_task"] = {"task": task, "result": parsed}
        save_meta(meta)

        return JSONResponse({"ok": True, "agent": slug, "result": parsed})

    except Exception as e:
        error_text = f"{type(e).__name__}: {e}"
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –∞–≥–µ–Ω—Ç—É %s: %s", slug, error_text)
        traceback.print_exc()
        return JSONResponse({"ok": False, "error": error_text}, status_code=500)



@router.post('/agents/{slug}/webhook')
@router.post('/agents/{folder}/{slug}/webhook')
async def proxy_agent_webhook(request: Request, slug: str, folder: str = None):
    try:
        meta = load_meta()
        if folder:
            agent = next((a for a in meta if a['slug'] == slug and a.get('folder') == folder), None)
        else:
            agent = next((a for a in meta if a['slug'] == slug and not a.get('folder')), None) or                     next((a for a in meta if a['slug'] == slug), None)
        if not agent:
            raise HTTPException(status_code=404, detail='Agent not found')
        bot_path = Path(agent['path']) / 'bot.py'
        if not bot_path.exists():
            raise HTTPException(status_code=404, detail='bot.py not found')
        spec = importlib.util.spec_from_file_location(f"agent_{slug}", str(bot_path))
        mod = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(mod)
        data = await request.json()
        if hasattr(mod, 'app'):
            from fastapi.testclient import TestClient
            client = TestClient(mod.app)
            resp = client.post('/webhook', json=data)
            try:
                return JSONResponse(resp.json(), status_code=resp.status_code)
            except Exception:
                return JSONResponse({'ok': True, 'status_code': resp.status_code, 'text': resp.text}, status_code=resp.status_code)
        if hasattr(mod, 'handle_task'):
            text = data.get('message', {}).get('text', '')
            res = mod.handle_task(text)
            return JSONResponse({'ok': True, 'result': res})
        raise HTTPException(status_code=500, detail='No webhook or handler found for agent')
    except HTTPException:
        raise
    except Exception as e:
        logger.exception("Error proxying webhook for agent %s: %s", slug, e)
        raise HTTPException(status_code=500, detail=str(e))
    
    
from fastapi.responses import JSONResponse
from utils import load_meta

@router.get("/folders")
def get_folders():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ç–∞–ª–æ–≥–æ–≤ (–ø–∞–ø–æ–∫)."""
    meta = load_meta()
    folders = sorted({a.get("folder", "root") for a in meta})
    return JSONResponse(folders)

@router.get('/agents')
async def list_agents():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ (–∞–≥–µ–Ω—Ç–æ–≤) –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–º—ë–Ω –∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.
    """
    try:
        meta = load_meta()
        agents = [a for a in meta if not a.get("is_folder", False)]
        return JSONResponse(agents)
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤: %s", e)
        return JSONResponse({"ok": False, "error": str(e)}, status_code=500)


