import re
import logging
import shutil
from pathlib import Path
from fastapi import APIRouter, Request, HTTPException, Form, Depends
from fastapi.responses import HTMLResponse, JSONResponse
from fastapi.templating import Jinja2Templates

from core.auth import get_current_user
from utils import load_meta, save_meta, ensure_user_root, filter_meta_by_owner

logger = logging.getLogger("manager")
router = APIRouter()

BASE = Path(__file__).resolve().parent.parent
TEMPLATES_DIR = BASE / "templates"
templates = Jinja2Templates(directory=str(TEMPLATES_DIR))


def slugify(name: str):
    return re.sub(r"[^a-zA-Z0-9_-]", "_", name.strip()).lower()


# üü¢ HTML-—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ñ–∏—Å–∞ (–±–µ–∑ Depends ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ)
@router.get("/office", response_class=HTMLResponse)
async def office_page(request: Request):
    """
    –ì–ª–∞–≤–Ω–∞—è HTML-—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ñ–∏—Å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ —á–µ—Ä–µ–∑ JS.
    """
    return templates.TemplateResponse("office.html", {"request": request})


# üìÅ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ç–∞–ª–æ–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.get("/folders")
def get_folders(user: str = Depends(get_current_user)):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ç–∞–ª–æ–≥–æ–≤ (–ø–∞–ø–æ–∫) —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ, —É –∫–æ—Ç–æ—Ä—ã—Ö is_folder=True.
    """
    meta = load_meta()
    user_meta = filter_meta_by_owner(meta, user)
    folders = sorted({
        a.get("folder", "root")
        for a in user_meta
        if a.get("is_folder", False)
    })
    return JSONResponse(folders)

# üìÇ –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.get("/folder/{folder_name}", response_class=JSONResponse)
async def get_folder_agents(folder_name: str, user: str = Depends(get_current_user)):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–Ω—É—Ç—Ä–∏ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞.
    """
    meta = load_meta()
    folder = folder_name.strip().lower()
    agents = [
        a for a in meta
        if not a.get("is_folder", False)
        and a.get("folder", "").strip().lower() == folder
        and a.get("owner") == user
    ]
    return JSONResponse(agents)


# ü§ñ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.get("/agents", response_class=JSONResponse)
async def list_agents(user: str = Depends(get_current_user)):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    meta = load_meta()
    agents = [a for a in meta if not a.get("is_folder", False) and a.get("owner") == user]
    return JSONResponse(agents)


# üß© –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—á–µ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.post("/init_user_workspace")
async def init_user_workspace(user: str = Depends(get_current_user)):
    """
    –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è /agents/{user},
    –ø–∞–ø–∫–∞ root –∏ –∞–≥–µ–Ω—Ç assistant_default.
    """
    meta = load_meta()
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    assistants = [
        a for a in meta
        if a.get("slug") == "assistant_default" and a.get("owner") == user
    ]
    if len(assistants) > 1:
        logger.warning(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(assistants)} –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user}, –æ—Å—Ç–∞–≤–ª—è–µ–º –æ–¥–Ω–æ–≥–æ.")
        keep = min(assistants, key=lambda a: a.get("created_at", ""))
        for extra in assistants:
            if extra != keep:
                try:
                    path = Path(extra.get("path", ""))
                    if path.exists():
                        shutil.rmtree(path)
                    meta.remove(extra)
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {e}")
        save_meta(meta)
    
    user_root = ensure_user_root(user)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ root-–ø–∞–ø–∫–∏
    has_root = any(
        a.get("is_folder") and a.get("folder") == "root" and a.get("owner") == user
        for a in meta
    )
    if not has_root:
        meta.append({
            "folder": "root",
            "is_folder": True,
            "name": "root",
            "slug": f"folder_root_{user}",
            "owner": user,
            "created_at": __import__('datetime').datetime.utcnow().isoformat() + 'Z'
        })
        save_meta(meta)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ assistant_default
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ slug –∏ owner)
    has_default_assistant = any(
        a.get("slug") == "assistant_default"
        and a.get("folder") == "root"
        and a.get("owner") == user
        and Path(a.get("path", "")) == (user_root / "root" / "assistant_default")
        for a in meta
    )

    if not has_default_assistant:
        default_path = user_root / "root" / "assistant_default"
        default_path.mkdir(parents=True, exist_ok=True)

        # === –°–æ–∑–¥–∞—ë–º –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π Amvera LLM-–±–æ—Ç ===
        bot_code = """import os
            import re
            import base64
            import logging
            import requests
            from fastapi import FastAPI, Request
            from telegram import Update
            from langchain_amvera import AmveraLLM
            from dotenv import load_dotenv
            from pathlib import Path

            # === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
            load_dotenv()

            # --- –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ---
            logger = logging.getLogger("agent")
            logger.setLevel(logging.DEBUG)
            log_dir = Path(__file__).parent
            fh = logging.FileHandler(log_dir / "agent.log", encoding="utf-8")
            fh.setFormatter(logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s"))
            logger.addHandler(fh)

            # --- –ö–û–ù–°–¢–ê–ù–¢–´ ---
            AMVERA_API_KEY = os.getenv("AMVERA_API_KEY")
            AMVERA_MODEL = os.getenv("AMVERA_MODEL", "gpt-4.1")

            if not AMVERA_API_KEY:
                logger.warning("‚ö†Ô∏è AMVERA_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤ .env")

            TELEGRAM_TOKEN = globals().get("TELEGRAM_TOKEN", None)
            TELEGRAM_API_URL = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}" if TELEGRAM_TOKEN else None

            PROMPT = '–¢—ã –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É.'

            app = FastAPI()
            llm = AmveraLLM(model=AMVERA_MODEL, api_token=AMVERA_API_KEY)


            def send_message(chat_id: int, text: str, parse_mode="Markdown"):
                if not TELEGRAM_API_URL:
                    logger.debug(f"[NoTelegram] -> {chat_id}: {text[:120]}")
                    return
                try:
                    requests.post(f"{TELEGRAM_API_URL}/sendMessage",
                                json={"chat_id": chat_id, "text": text, "parse_mode": parse_mode}, timeout=10)
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Telegram-—Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


            def process_llm_response(chat_id: int, response: str):
                pattern = re.compile(r"```(.*?)```|(https?://[^\s]+\\.(?:png|jpg|jpeg|gif|webp))|(data:image[^\s]+)", re.DOTALL)
                last_end = 0
                for match in pattern.finditer(response):
                    start, end = match.span()
                    if start > last_end:
                        text_chunk = response[last_end:start].strip()
                        if text_chunk:
                            send_message(chat_id, text_chunk)
                    if match.group(1):
                        send_message(chat_id, f"```\n{match.group(1)}\n```")
                    elif match.group(2):
                        send_message(chat_id, f"üñº {match.group(2)}")
                    elif match.group(3):
                        send_message(chat_id, "üì∏ [–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ base64]")
                    last_end = end
                if last_end < len(response):
                    tail = response[last_end:].strip()
                    if tail:
                        send_message(chat_id, tail)


            def handle_task(task: str):
                try:
                    if not AMVERA_API_KEY:
                        return "‚ö†Ô∏è –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç AMVERA_API_KEY. –£–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤ .env"

                    if not task:
                        return "‚ö†Ô∏è –û—à–∏–±–∫–∞: –ø—É—Å—Ç–∞—è –∑–∞–¥–∞—á–∞"

                    query = PROMPT + "\\n\\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: " + task.strip()
                    logger.info(f"–ó–∞–ø—Ä–æ—Å –∫ LLM: {query[:120]}...")

                    if len(query) > 4000:
                        query = query[-4000:]
                    resp = llm.invoke(query)

                    if hasattr(resp, "content"):
                        return resp.content
                    elif isinstance(resp, dict) and "content" in resp:
                        return resp["content"]
                    elif isinstance(resp, str):
                        return resp
                    else:
                        return str(resp)

                except Exception as e:
                    logger.exception(f"–û—à–∏–±–∫–∞ LLM: {e}")
                    return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}"


            @app.post("/webhook")
            async def webhook(request: Request):
                try:
                    data = await request.json()
                    update = Update.de_json(data, None)
                    if update.message and update.message.text:
                        user_text = update.message.text
                        chat_id = update.message.chat.id
                        result = handle_task(user_text)
                        process_llm_response(chat_id, result)
                    return {"ok": True}
                except Exception as e:
                    logger.exception(f"–û—à–∏–±–∫–∞ Webhook: {e}")
                    return {"ok": False, "error": str(e)}
            """

        (default_path / "bot.py").write_text(bot_code, encoding="utf-8")

        entry = {
            "name": "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç",
            "slug": "assistant_default",
            "folder": "root",
            "is_folder": False,
            "owner": user,
            "created_at": __import__('datetime').datetime.utcnow().isoformat() + 'Z',
            "path": str(default_path),
            "deploy_url": "",
            "status": "ready"
        }
        meta.append(entry)
        save_meta(meta)
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω assistant_default —Å Amvera LLM –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user}")
    else:
        logger.info(f"‚ÑπÔ∏è assistant_default —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user}")

    return {"ok": True, "message": f"–†–∞–±–æ—á–µ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ {user} –≥–æ—Ç–æ–≤–æ"}




# üßæ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
@router.get("/me", response_class=JSONResponse)
async def get_user_info(user: str = Depends(get_current_user)):
    """–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    return JSONResponse({"ok": True, "user": user})
