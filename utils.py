import os
import json
import asyncio
import logging
import importlib.util
from pathlib import Path
from datetime import datetime
import requests
from typing import Any, Dict
from filelock import FileLock
from core.mcp import load_context, save_context

logger = logging.getLogger("manager")

# === –ü—É—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞ ===
BASE_DIR = Path(__file__).resolve().parent
AGENTS_DIR = BASE_DIR / "agents"
AGENTS_DIR.mkdir(parents=True, exist_ok=True)
META_PATH = AGENTS_DIR / "agents.json"




# === –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (agents.json) ===
def load_meta() -> list[dict]:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç agents.json (–µ—Å–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω ‚Äî –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç)."""
    logger.info("META_PATH %s", META_PATH)
    try:
        if not META_PATH.exists():
            META_PATH.write_text("[]", encoding="utf-8")
        return json.loads(META_PATH.read_text(encoding="utf-8"))
    except json.JSONDecodeError:
        logger.warning("‚ö†Ô∏è –ü–æ–≤—Ä–µ–∂–¥–µ–Ω agents.json ‚Äî –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        META_PATH.write_text("[]", encoding="utf-8")
        return []


import time

def save_meta(meta: list[dict]):
    tmp_path = META_PATH.with_suffix(".tmp")
    lock = FileLock(str(META_PATH) + ".lock")

    with lock:
        with open(tmp_path, "w", encoding="utf-8") as f:
            json.dump(meta, f, ensure_ascii=False, indent=2)

        import shutil, time
        for attempt in range(3):
            try:
                shutil.move(str(tmp_path), str(META_PATH))
                logger.debug("‚úÖ agents.json –æ–±–Ω–æ–≤–ª—ë–Ω")
                break
            except PermissionError as e:
                logger.warning(f"‚ö†Ô∏è agents.json –∑–∞–Ω—è—Ç, –ø–æ–ø—ã—Ç–∫–∞ {attempt+1}/3: {e}")
                time.sleep(1)




# === –ú—É–ª—å—Ç–∏–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ö–µ–ª–ø–µ—Ä—ã ===
def filter_meta_by_owner(meta: list[dict], owner: str) -> list[dict]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ–±—ä–µ–∫—Ç—ã, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    return [a for a in meta if a.get("owner") == owner]


def ensure_user_root(owner: str) -> Path:
    """–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –Ω–∞–ª–∏—á–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ /agents/{owner}."""
    user_dir = AGENTS_DIR / owner
    user_dir.mkdir(parents=True, exist_ok=True)
    return user_dir


# === –í—ã–∑–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤ ===
async def call_agent_local(path: Path, task: str) -> Dict[str, Any]:
    """–í—ã–∑—ã–≤–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ –µ–≥–æ bot.py."""
    try:
        bot_file = path / "bot.py"
        if not bot_file.exists():
            raise FileNotFoundError(f"bot.py –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {path}")

        spec = importlib.util.spec_from_file_location(f"agent_{path.name}", str(bot_file))
        mod = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(mod)

        if not hasattr(mod, "handle_task"):
            raise AttributeError(f"–§—É–Ω–∫—Ü–∏—è handle_task –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ {path.name}")

        logger.info(f"üß† –í—ã–∑–æ–≤ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞: {path.name}")
        res = mod.handle_task(task)
        return {"ok": True, "source": "local", "result": res}

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞: {e}")
        return {"ok": False, "error": str(e)}


async def call_agent_remote(url: str, task: str) -> Dict[str, Any]:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É –∞–≥–µ–Ω—Ç—É, —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–º—É —É–¥–∞–ª–µ–Ω–Ω–æ (—á–µ—Ä–µ–∑ webhook)."""
    try:
        payload = {
            "message": {
                "message_id": 1,
                "from": {"id": 1111, "is_bot": False, "first_name": "Manager"},
                "chat": {"id": 123456, "type": "private"},
                "date": int(__import__("time").time()),
                "text": task
            }
        }
        r = requests.post(url.rstrip("/") + "/webhook", json=payload, timeout=20)
        r.raise_for_status()
        return {"ok": True, "source": "remote", "status": r.status_code, "result": r.text}
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ —É–¥–∞–ª—ë–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞: {e}")
        return {"ok": False, "error": str(e)}


# === –ü–∞–º—è—Ç—å –∞–≥–µ–Ω—Ç–∞ ===
def save_memory(agent_path: Path, record: dict[str, Any]):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ memory.json –∞–≥–µ–Ω—Ç–∞ (–±–µ–∑–æ–ø–∞—Å–Ω–æ –∏ –∞—Ç–æ–º–∞—Ä–Ω–æ)."""
    mem_file = agent_path / "memory.json"
    tmp_file = mem_file.with_suffix(".tmp")
    lock = FileLock(str(mem_file) + ".lock")

    with lock:
        try:
            memory = []
            if mem_file.exists():
                try:
                    memory = json.loads(mem_file.read_text(encoding="utf-8"))
                except json.JSONDecodeError:
                    logger.warning(f"‚ö†Ô∏è –ü–æ–≤—Ä–µ–∂–¥–µ–Ω memory.json —É {agent_path.name}, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
                    memory = []

            record["date"] = record.get("date") or datetime.utcnow().isoformat() + "Z"
            memory.append(record)

            with open(tmp_file, "w", encoding="utf-8") as f:
                json.dump(memory, f, ensure_ascii=False, indent=2)
            os.replace(tmp_file, mem_file)
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ø–∞–º—è—Ç–∏ –∞–≥–µ–Ω—Ç–∞ {agent_path.name}: {e}")


# === –ö–æ–Ω—Ç–µ–∫—Å—Ç ===
async def call_agent_with_context(agent, task: str):
    """
    –í—ã–∑—ã–≤–∞–µ—Ç –∞–≥–µ–Ω—Ç–∞ —Å —É—á—ë—Ç–æ–º –µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ PROMPT –∏–∑ bot.py.
    –¢–µ–ø–µ—Ä—å:
      - –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
      - –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
      - –õ–æ–≥–∏—Ä—É–µ—Ç –≤—Å—ë –≤ debug
    """
    import json, re, importlib.util, logging
    from datetime import datetime
    from pathlib import Path
    from core.mcp import load_context, save_context
    from utils import call_agent_local

    logger = logging.getLogger("context")

    agent_id = agent["slug"]
    path = Path(agent["path"])

    # === 1Ô∏è‚É£ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç ===
    context = load_context(agent_id)
    context_text = json.dumps(context or {}, ensure_ascii=False, indent=2)

    # === 2Ô∏è‚É£ –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ ===
    MAX_CONTEXT_CHARS = 3000  # –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ ~500‚Äì700 —Ç–æ–∫–µ–Ω–æ–≤
    if len(context_text) > MAX_CONTEXT_CHARS:
        logger.warning(f"[{agent_id}] –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π ({len(context_text)} —Å–∏–º–≤–æ–ª–æ–≤) ‚Äî –æ–±—Ä–µ–∑–∞–µ–º.")
        context_text = context_text[-MAX_CONTEXT_CHARS:]

    # === 3Ô∏è‚É£ –ò–∑–≤–ª–µ–∫–∞–µ–º PROMPT –∏–∑ bot.py ===
    prompt_text = ""
    bot_path = path / "bot.py"
    if bot_path.exists():
        try:
            text = bot_path.read_text(encoding="utf-8")
            match = re.search(r'PROMPT\s*=\s*"""(.*?)"""', text, re.DOTALL)
            if match:
                prompt_text = match.group(1).strip()
        except Exception as e:
            logger.warning(f"[{agent_id}] –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è PROMPT: {e}")

    team_bias = float(agent.get("team_bias", 0.5))
    role_weight = 1.0 - team_bias
    context_weight = team_bias

    # === 4Ô∏è‚É£ –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç ===
    full_prompt = (
        f"üß† –†–æ–ª—å –∞–≥–µ–Ω—Ç–∞ (–≤–µ—Å {role_weight:.1f}):\n"
        f"{prompt_text or '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫.'}\n\n"
        f"üìò –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã (–≤–µ—Å {context_weight:.1f}):\n"
        f"{context_text}\n\n"
        f"üß© –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞:\n{task}\n\n"
        f"–û—Ç–≤–µ—Ç—å, —É—á–∏—Ç—ã–≤–∞—è –±–∞–ª–∞–Ω—Å ‚Äî "
        f"{'–æ—Ä–∏–µ–Ω—Ç–∏—Ä—É–π—Å—è –Ω–∞ –ª–∏—á–Ω–æ–µ –º–Ω–µ–Ω–∏–µ' if role_weight > 0.6 else '—É—á–∏—Ç—ã–≤–∞–π –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–µ –º–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã'}."
    )

    # === 5Ô∏è‚É£ –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤ ===
    def estimate_tokens(text: str):
        # –ü—Ä–æ—Å—Ç–µ–π—à–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ ‚Äî 1 —Ç–æ–∫–µ–Ω ‚âà 4 —Å–∏–º–≤–æ–ª–∞ –ª–∞—Ç–∏–Ω–∏—Ü—ã
        return int(len(text) / 4)

    token_count = estimate_tokens(full_prompt)
    logger.info(f"[{agent_id}] ‚ûú {token_count} —Ç–æ–∫–µ–Ω–æ–≤ (‚âà{len(full_prompt)} —Å–∏–º–≤–æ–ª–æ–≤)")

    # === 6Ô∏è‚É£ –í—ã–∑–æ–≤ –∞–≥–µ–Ω—Ç–∞ ===
    result = await call_agent_local(path, full_prompt)

    # === 7Ô∏è‚É£ –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç ===
    new_context = {
        **(context or {}),
        "last_task": task,
        "last_result": result.get("result") if isinstance(result, dict) else str(result),
        "_updated": datetime.now().isoformat(),
        "_token_count": token_count
    }
    save_context(agent_id, new_context)

    return result


