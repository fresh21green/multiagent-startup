import os
import json
import asyncio
import logging
import importlib.util
from pathlib import Path
from datetime import datetime
import requests
from typing import Any, Dict
from filelock import FileLock

logger = logging.getLogger("manager")

# === –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (agents.json) ===
META_PATH = Path(__file__).resolve().parent / "agents" / "agents.json"

def load_meta() -> list[dict]:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç agents.json (–µ—Å–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω ‚Äî –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç)."""
    try:
        if not META_PATH.exists():
            META_PATH.write_text("[]", encoding="utf-8")
        return json.loads(META_PATH.read_text(encoding="utf-8"))
    except json.JSONDecodeError:
        logger.warning("‚ö†Ô∏è –ü–æ–≤—Ä–µ–∂–¥–µ–Ω agents.json ‚Äî –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        META_PATH.write_text("[]", encoding="utf-8")
        return []

def save_meta(meta: list[dict]):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç agents.json (—Å –∞—Ç–æ–º–∞—Ä–Ω–æ–π –∑–∞–ø–∏—Å—å—é –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π)."""
    tmp_path = META_PATH.with_suffix(".tmp")
    lock_path = str(META_PATH) + ".lock"
    lock = FileLock(lock_path)

    with lock:
        try:
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with open(tmp_path, "w", encoding="utf-8") as f:
                json.dump(meta, f, ensure_ascii=False, indent=2)

            # –ê—Ç–æ–º–∞—Ä–Ω–æ –∑–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª
            os.replace(tmp_path, META_PATH)
            logger.debug("‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ.")
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ meta: {e}")
            raise


# === –í—ã–∑–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤ ===
async def call_agent_local(path: Path, task: str) -> Dict[str, Any]:
    """–í—ã–∑—ã–≤–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ –µ–≥–æ bot.py."""
    try:
        bot_file = path / "bot.py"
        if not bot_file.exists():
            raise FileNotFoundError(f"bot.py –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {path}")

        spec = importlib.util.spec_from_file_location(f"agent_{path.name}", str(bot_file))
        mod = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(mod)

        if not hasattr(mod, "handle_task"):
            raise AttributeError(f"–§—É–Ω–∫—Ü–∏—è handle_task –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ {path.name}")

        logger.info(f"üß† –í—ã–∑–æ–≤ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞: {path.name}")
        res = mod.handle_task(task)
        return {"ok": True, "source": "local", "result": res}

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞: {e}")
        return {"ok": False, "error": str(e)}

async def call_agent_remote(url: str, task: str) -> Dict[str, Any]:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É –∞–≥–µ–Ω—Ç—É, —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–º—É —É–¥–∞–ª–µ–Ω–Ω–æ (—á–µ—Ä–µ–∑ webhook)."""
    try:
        payload = {
            "message": {
                "message_id": 1,
                "from": {"id": 1111, "is_bot": False, "first_name": "Manager"},
                "chat": {"id": 123456, "type": "private"},
                "date": int(__import__("time").time()),
                "text": task
            }
        }
        r = requests.post(url.rstrip("/") + "/webhook", json=payload, timeout=20)
        r.raise_for_status()
        return {"ok": True, "source": "remote", "status": r.status_code, "result": r.text}
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ —É–¥–∞–ª—ë–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞: {e}")
        return {"ok": False, "error": str(e)}

# === –ü–∞–º—è—Ç—å –∞–≥–µ–Ω—Ç–∞ ===
def save_memory(agent_path: Path, record: dict[str, Any]):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ memory.json –∞–≥–µ–Ω—Ç–∞ (—Å file-lock, –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏ –∞—Ç–æ–º–∞—Ä–Ω–æ)."""
    mem_file = agent_path / "memory.json"
    tmp_file = mem_file.with_suffix(".tmp")
    lock = FileLock(str(mem_file) + ".lock")

    with lock:
        try:
            memory = []
            if mem_file.exists():
                try:
                    memory = json.loads(mem_file.read_text(encoding="utf-8"))
                except json.JSONDecodeError:
                    logger.warning(f"‚ö†Ô∏è –ü–æ–≤—Ä–µ–∂–¥–µ–Ω memory.json —É {agent_path.name}, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
                    memory = []

            record["date"] = record.get("date") or datetime.utcnow().isoformat() + "Z"
            memory.append(record)

            with open(tmp_file, "w", encoding="utf-8") as f:
                json.dump(memory, f, ensure_ascii=False, indent=2)
            os.replace(tmp_file, mem_file)
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ø–∞–º—è—Ç–∏ –∞–≥–µ–Ω—Ç–∞ {agent_path.name}: {e}")

