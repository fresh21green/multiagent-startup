diff --git a/utils.py b/utils.py
index 0000000..1111111 100644
--- a/utils.py
+++ b/utils.py
@@ -8,6 +8,25 @@ from filelock import FileLock
 from core.mcp import load_context, save_context
+
+# === Мультипользовательские хелперы ===
+from pathlib import Path
+
+BASE_DIR = Path(__file__).resolve().parent.parent
+AGENTS_DIR = BASE_DIR / "agents"
+AGENTS_DIR.mkdir(parents=True, exist_ok=True)
+META_PATH = AGENTS_DIR / "agents.json"
+
+def filter_meta_by_owner(meta: list[dict], owner: str) -> list[dict]:
+    """Возвращает только объекты (агентов/папки), принадлежащие пользователю."""
+    return [a for a in meta if a.get("owner") == owner]
+
+def ensure_user_root(owner: str) -> Path:
+    """Гарантирует наличие директории /agents/{owner}."""
+    user_dir = AGENTS_DIR / owner
+    user_dir.mkdir(parents=True, exist_ok=True)
+    return user_dir
+
diff --git a/core/agents.py b/core/agents.py
index 0000000..2222222 100644
--- a/core/agents.py
+++ b/core/agents.py
@@ -1,6 +1,10 @@
 import sys
 import os, re, shutil, markdown, logging
 sys.path.append(os.path.dirname(__file__))
+
+from core.auth import get_current_user
+from fastapi import Depends
+from utils import ensure_user_root, filter_meta_by_owner
@@ -40,7 +44,10 @@ def slugify(name: str):
     return re.sub(r"[^a-zA-Z0-9_-]", "_", name.strip()).lower()
 
-@router.get("/", response_class=HTMLResponse)
-async def index(request: Request): 
-    meta = load_meta()
+@router.get("/", response_class=HTMLResponse)
+async def index(request: Request, user: str = Depends(get_current_user)):
+    meta = load_meta()
+    user_root = ensure_user_root(user)
+    user_meta = filter_meta_by_owner(meta, user)
@@ -113,7 +120,9 @@ async def create_agent(
     telegram_token: str = Form(''),
     folder: str = Form('root')
-):
+    , user: str = Depends(get_current_user)):
     name = name.strip()
     if not name:
         raise HTTPException(status_code=400, detail='Name required')
@@ -122,7 +131,9 @@ async def create_agent(
     folder = folder.strip() or "root"
-    dest = AGENTS_DIR / folder / slug
+    meta = load_meta()
+    user_root = ensure_user_root(user)
+    dest = user_root / folder / slug
@@ -127,7 +138,8 @@ async def create_agent(
     entry = {
         "name": name,
         "slug": slug,
         "folder": folder,
         "is_folder": False,
-        "created_at": __import__('datetime').datetime.utcnow().isoformat() + 'Z',
-        "path": str(dest),
-        "deploy_url": "",
-        "status": "created"
+        "owner": user,
+        "created_at": __import__('datetime').datetime.utcnow().isoformat() + 'Z',
+        "path": str(dest),
+        "deploy_url": "",
+        "status": "created"
     }
     meta.append(entry)
     save_meta(meta)
@@ -298,7 +310,8 @@ @router.post("/create_folder")
-async def create_folder(name: str = Form(...)):
+async def create_folder(name: str = Form(...), user: str = Depends(get_current_user)):
     folder = name.strip()
     if not folder:
         return JSONResponse({"ok": False, "error": "empty_name"})
-    folder_path = AGENTS_DIR / folder
+    user_root = ensure_user_root(user)
+    folder_path = user_root / folder
     if folder_path.exists():
         return JSONResponse({"ok": False, "error": "exists"})
     folder_path.mkdir(parents=True, exist_ok=True)
@@ -306,7 +319,9 @@ async def create_folder(name: str = Form(...)):
     if not any(a.get("is_folder") and a.get("folder") == folder for a in meta):
         meta.append({"folder": folder, "is_folder": True, "name": folder,
-                     "slug": f"folder_{folder}",
-                     "created_at": __import__('datetime').datetime.utcnow().isoformat() + 'Z',})
+                     "slug": f"folder_{folder}_{user}",
+                     "owner": user,
+                     "created_at": __import__('datetime').datetime.utcnow().isoformat() + 'Z'})
         save_meta(meta)
     return JSONResponse({"ok": True, "folder": folder})
diff --git a/scripts/migrate_owners.py b/scripts/migrate_owners.py
new file mode 100644
--- /dev/null
+++ b/scripts/migrate_owners.py
@@ -0,0 +1,38 @@
+from pathlib import Path
+import json, shutil
+
+ROOT = Path(__file__).resolve().parents[1]
+META = ROOT / "agents" / "agents.json"
+AGENTS = ROOT / "agents"
+
+data = json.loads(META.read_text(encoding="utf-8"))
+changed = False
+
+for a in data:
+    if "owner" not in a:
+        a["owner"] = "legacy"
+        changed = True
+        p = Path(a.get("path", ""))
+        if p and p.exists() and (AGENTS / "legacy") not in p.parents:
+            newp = AGENTS / "legacy" / (a.get("folder") or "root") / a["slug"]
+            newp.parent.mkdir(parents=True, exist_ok=True)
+            if not newp.exists():
+                try:
+                    shutil.move(str(p), str(newp))
+                except Exception as e:
+                    print(f"⚠️ Не удалось переместить {p}: {e}")
+            a["path"] = str(newp)
+
+if changed:
+    META.write_text(json.dumps(data, ensure_ascii=False, indent=2), encoding="utf-8")
+    print("✅ migrate owners: done")
+else:
+    print("ℹ️ migrate owners: nothing to do")
