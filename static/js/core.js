// ========================================================================
// üß© CORE MODULE ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞–º–∏ –∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏
// ========================================================================

const AIManager = (() => {
  const qs  = s => document.querySelector(s);
  const qsa = s => document.querySelectorAll(s);

  // --- üß† –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–π ---
  const showMessage = (text, type = "info") => {
    const msgBox = qs("#folderMessage");
    if (!msgBox) return;
    msgBox.textContent = text;
    msgBox.className = type;
    setTimeout(() => (msgBox.textContent = ""), 1500);
  };

  // === API wrapper ===
  async function api(url, options = {}) {
    try {
      const res = await fetch(url, options);
      const text = await res.text();
      if (!res.ok) throw new Error(`${res.status}: ${text.slice(0,100)}`);
      try {
        return JSON.parse(text);
      } catch {
        return text;
      }
    } catch (err) {
      console.error("API error:", err);
      setSystemStatus("error", err.message);
      throw err;
    }
  }

  // --- üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ ---
  const handleCreateFolder = async e => {
    e.preventDefault();
    const input = qs("#folderName");
    const name = input.value.trim();
    if (!name) return showMessage("‚ùó–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–∞—Ç–∞–ª–æ–≥–∞", "warn");

    const res = await fetch("/create_folder", {
      method: "POST",
      body: new URLSearchParams({ name }),
    });
    const data = await res.json();

    if (data.ok) {
      showMessage(`‚úÖ –ö–∞—Ç–∞–ª–æ–≥ '${name}' —Å–æ–∑–¥–∞–Ω`);
      renderFolder(name);
      addFolderToSelect(name);
      input.value = "";
    } else if (data.error === "exists") {
      showMessage("‚ö†Ô∏è –¢–∞–∫–æ–π –∫–∞—Ç–∞–ª–æ–≥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", "warn");
    } else {
      showMessage("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞", "error");
    }
  };

  // --- üìÑ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ –≤ —Å–µ–ª–µ–∫—Ç ---
  const addFolderToSelect = (name) => {
    const select = qs("#folder-select");
    if (!select) return;
    if ([...select.options].some(o => o.value === name)) return;
    const opt = document.createElement("option");
    opt.value = name;
    opt.textContent = name;
    select.appendChild(opt);
  };

  // --- üé® –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ---
  const renderFolder = (name) => {
    const container = qs("#folders-container");
    if (!container || qs(`#folder-${name}`)) return;

    const html = `
      <section id="folder-${name}" class="folder" data-folder="${name}">
        <div class="folder-header">
          <h2 class="folder-title" onclick="AIManager.toggleFolder('${name}')">üìÇ ${name}</h2>
          <div class="folder-actions">
            <button class="assign-btn" onclick="toggleTaskBox('${name}')">
              <i data-lucide="rocket"></i> –ó–∞–¥–∞—Ç—å –∑–∞–¥–∞—á—É
            </button>
            <button class="delete-folder-btn" onclick="AIManager.deleteFolder('${name}')">
              <i data-lucide="trash-2"></i> –£–¥–∞–ª–∏—Ç—å
            </button>
          </div>
        </div>
        <div class="task-box hidden" id="task-box-${name}">
          <textarea placeholder="–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∫–∞—Ç–∞–ª–æ–≥–∞ '${name}'..." id="task-input-${name}"></textarea>
          <button onclick="assignTaskToFolder('${name}')">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
        </div>
        <ul class="agents-list" id="agents-${name}" style="display:none;">
          <li><em>–ü–æ–∫–∞ –ø—É—Å—Ç–æ</em></li>
        </ul>
      </section>`;
    container.insertAdjacentHTML("afterbegin", html);
  };

  window.toggleTaskBox = (folder) => {
    const box = document.querySelector(`#task-box-${folder}`);
    if (box) box.classList.toggle("hidden");
  };

  // --- ü§ñ –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ---
  const handleCreateAgent = async (e) => {
    e.preventDefault();
    const form = e.target;
    const formData = new FormData(form);

    try {
      const res = await fetch("/create_agent", { method: "POST", body: formData });
      const data = await res.json();
      if (!data.ok) throw new Error(data.error || "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è");

      const folder = formData.get("folder") || "root";
      const name   = formData.get("name");
      const slug   = name.toLowerCase().replace(/[^a-z0-9_-]/g, "_");
      addAgentToFolder(folder, name, slug);
      showMessage(`‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ '${name}' —Å–æ–∑–¥–∞–Ω`);
      form.reset();
    } catch (err) {
      showMessage(`‚ùå ${err.message}`, "error");
    }
  };

  const addAgentToFolder = (folder, name, slug) => {
    const section = document.querySelector(`#folder-${folder} ul`);
    if (!section) return;
    section.insertAdjacentHTML("beforeend", `
      <li>
        ü§ñ <a href="/agent/${slug}" target="_blank">${name}</a>
        <button class="icon-btn delete-agent-btn" onclick="AIManager.deleteAgent('${slug}', '${folder}')">
          <i data-lucide="trash-2"></i>
        </button>
      </li>`);
    if (window.lucide) lucide.createIcons();
  };

  // --- üóë –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (–±–µ–∑ alert) ---
  const deleteAgent = async (slug, folder) => {
    const li = document.querySelector(`#agents-${folder} li:has(a[href="/agent/${slug}"])`);
    if (!li) return;

    const confirmBox = document.createElement("div");
    confirmBox.className = "confirm-delete";
    confirmBox.innerHTML = `
      <span>–£–¥–∞–ª–∏—Ç—å?</span>
      <button class="yes">–î–∞</button>
      <button class="no">–û—Ç–º–µ–Ω–∞</button>
    `;
    li.appendChild(confirmBox);

    confirmBox.querySelector(".yes").onclick = async () => {
      const res = await fetch("/delete_agent", {
        method: "POST",
        body: new URLSearchParams({ slug }),
      });
      const data = await res.json();
      if (data.ok) {
        li.style.opacity = "0";
        setTimeout(() => li.remove(), 300);
        showMessage(`üóëÔ∏è –£–¥–∞–ª—ë–Ω '${slug}'`);
      } else showMessage(`‚ùå ${data.error}`, "error");
    };
    confirmBox.querySelector(".no").onclick = () => confirmBox.remove();
  };

  // --- üìÇ –†–∞—Å–∫—Ä—ã—Ç–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ (–∑–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤) ---
 // === –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ ===
  async function toggleFolder(folder) {
    const list = document.getElementById(`agents-${folder}`);
    if (!list) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const isOpen = list.style.display === "block";

    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –¥—Ä—É–≥–∏–µ —Å–ø–∏—Å–∫–∏
    document.querySelectorAll(".agents-list").forEach(ul => (ul.style.display = "none"));

    // –ï—Å–ª–∏ –∫–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç—ã–π ‚Äî –ø—Ä–æ—Å—Ç–æ —Å–≤–µ—Ä–Ω—É—Ç—å
    if (isOpen) {
      list.style.display = "none";
      return;
    }

    // –ò–Ω–∞—á–µ ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –∏ –ø–æ–¥–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    list.style.display = "block";

    try {
      const res = await fetch(`/folder/${encodeURIComponent(folder)}`);
      if (!res.ok) throw new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤");
      const agents = await res.json();
      list.innerHTML = agents.length
        ? agents.map(a => `
            <li>
              ü§ñ <a href="/agent/${a.slug}" target="_blank">${a.name}</a>
              <button class="icon-btn delete-agent-btn" onclick="AIManager.deleteAgent('${a.slug}', '${folder}')">
                <i data-lucide="trash-2"></i>
              </button>
            </li>`).join("")
        : "<li><em>–ù–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.</em></li>";
      if (window.lucide) lucide.createIcons();
    } catch {
      list.innerHTML = "<li><em>‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤</em></li>";
    }
  }

  // --- ‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ ---
  const setSystemStatus = (state, message) => {
    const bar  = qs("#system-status-bar");
    const text = qs("#system-status-text");
    const icon = qs("#system-status-icon");
    if (!bar || !text || !icon) return;
    bar.classList.remove("active", "busy", "error");
    switch (state) {
      case "busy":  icon.textContent = "‚öôÔ∏è"; bar.classList.add("busy"); break;
      case "error": icon.textContent = "‚ö†Ô∏è"; bar.classList.add("error"); break;
      default:      icon.textContent = "üß†"; bar.classList.add("active");
    }
    text.textContent = message || "–í—Å–µ –∞–≥–µ–Ω—Ç—ã –∞–∫—Ç–∏–≤–Ω—ã";
  };

  const init = () => {
    qs("#folderForm")?.addEventListener("submit", handleCreateFolder);
  };

  return { init, toggleFolder, deleteAgent, setSystemStatus };
})();

// --- üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–æ–≤ ---
async function refreshFolderSelect() {
  try {
    const res = await fetch("/folders");
    if (!res.ok) throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–∞–ª–æ–≥–æ–≤");

    const folders = await res.json();
    const select = document.getElementById("folder-select");
    if (!select) return console.warn("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç #folder-select");

    select.innerHTML = folders.map(f => `<option value="${f}">${f}</option>`).join("");
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–æ–≤:", err);
  }
}

// üëá –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–æ—Å—Ç—É–ø–Ω–æ–π –≥–ª–æ–±–∞–ª—å–Ω–æ
window.refreshFolderSelect = refreshFolderSelect;

// ========================================================================
// üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
// ========================================================================
document.addEventListener("DOMContentLoaded", () => {
  const modal     = document.getElementById("agent-modal");
  const openBtn   = document.getElementById("open-agent-modal");
  const closeBtn  = document.getElementById("close-agent-modal");
  const form      = document.getElementById("create-agent-form");
  const nameInput = document.getElementById("agent-name");
  const errorBox  = document.getElementById("agent-name-error");
  const msgBox    = document.getElementById("agent-message");

  if (!modal || !openBtn) return; // –µ—Å–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ—Ç –º–æ–¥–∞–ª–∫–∏

  // --- –û—Ç–∫—Ä—ã—Ç—å –æ–∫–Ω–æ ---
  openBtn.addEventListener("click", () => {
    modal.style.display = "flex";
    refreshFolderSelect();
  });

  // --- –ó–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ ---
  closeBtn?.addEventListener("click", closeModal);
  modal.addEventListener("click", (e) => {
    if (e.target === modal) closeModal();
  });

  function closeModal() {
    modal.style.display = "none";
    form.reset();
    clearError();
    msgBox.style.display = "none";
  }

  // --- –û—á–∏—Å—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –≤–≤–æ–¥–µ ---
  nameInput.addEventListener("input", clearError);

  function showError(msg) {
    nameInput.classList.add("input-error");
    errorBox.textContent = msg;
  }

  function clearError() {
    nameInput.classList.remove("input-error");
    errorBox.textContent = "";
  }

  // --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞ ---
  async function agentExists(name) {
    try {
      const res = await fetch("/agents");
      if (!res.ok) return false;
      const agents = await res.json();
      return agents.some(a => a.name.toLowerCase() === name.toLowerCase());
    } catch {
      return false;
    }
  }

  // --- –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã ---
  form.addEventListener("submit", async (e) => {
    e.preventDefault();
    clearError();
    msgBox.style.display = "none";
    msgBox.className = "form-message";

    const formData = new FormData(form);
    const name = formData.get("name").trim();
    const folder = formData.get("folder");

    if (!name) {
      showError("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞");
      return;
    }

    // üîπ –ë—ã—Å—Ç—Ä–∞—è –ª–æ–∫–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    const existing = document.querySelectorAll(".agent-card h2");
    if ([...existing].some(h2 => h2.textContent.trim().toLowerCase() === name.toLowerCase())) {
      showError("‚ö†Ô∏è –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ –µ—Å—Ç—å");
      return;
    }

    // üîπ –°–µ—Ä–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    try {
      const res = await fetch("/create_agent", { method: "POST", body: formData });
      const data = await res.json();

      if (!data.ok) {
        msgBox.textContent = data.error || "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏";
        msgBox.classList.add("error");
        msgBox.style.display = "block";
        return;
      }

      msgBox.textContent = `‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ "${name}" —Å–æ–∑–¥–∞–Ω –≤ –∫–∞—Ç–∞–ª–æ–≥–µ "${folder}"`;
      msgBox.classList.add("success");
      msgBox.style.display = "block";

      form.reset();
      await AIManager.toggleFolder(folder);

      setTimeout(closeModal, 1500);
    } catch (err) {
      msgBox.textContent = "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É";
      msgBox.classList.add("error");
      msgBox.style.display = "block";
    }
  });
});

// ========================================================================
// üåç –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç—ã (–¥–ª—è office.js –∏ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π)
// ========================================================================

// –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–æ–≤
window.refreshFolderSelect = async function refreshFolderSelect() {
  try {
    const res = await fetch("/folders");
    if (!res.ok) throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–∞–ª–æ–≥–æ–≤");
    const folders = await res.json();
    const select = document.getElementById("folder-select");
    if (!select) return; // –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ—Ç —Å–µ–ª–µ–∫—Ç–∞
    select.innerHTML = folders.map(f => `<option value="${f}">${f}</option>`).join("");
  } catch (e) {
    console.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–∞–ª–æ–≥–æ–≤:", e.message);
  }
};

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º buildGraphData, —á—Ç–æ–±—ã office.js –º–æ–≥ —Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ
window.buildGraphData = function buildGraphData(agents) {
  const folderSet = new Set(agents.map(a => a.folder || "root"));

  const folderNodes = Array.from(folderSet).map((f, i) => ({
    id: `folder:${f}`,
    label: f,
    type: "folder",
    folder: f,
    fx: 250 * Math.cos((i / folderSet.size) * 2 * Math.PI),
    fy: 250 * Math.sin((i / folderSet.size) * 2 * Math.PI)
  }));

  const agentNodes = agents.map(a => ({
    id: a.slug,
    label: a.name,
    type: "agent",
    folder: a.folder || "root",
    status: a.status || "done",
    last_task: a.last_task || null,
  }));

  agentNodes.forEach(a => {
    const style = getAgentStyle(a);
    a.baseColor = style.color;
  });

  const links = agentNodes.map(a => ({
    source: a.id,
    target: `folder:${a.folder}`
  }));

  return { nodes: [...folderNodes, ...agentNodes], links };
};

// ========================================================================
// üé® –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ —É–∑–ª–æ–≤ (–¥–ª—è office.js)
// ========================================================================
window.colorByStatus = function colorByStatus(node) {
  if (node.type === "folder") return "#48cae4"; // –≥–æ–ª—É–±–æ–π ‚Äî –∫–∞—Ç–∞–ª–æ–≥–∏

  switch (node.status) {
    case "running": return "#ffd166"; // –∂—ë–ª—Ç—ã–π
    case "error":   return "#ef476f"; // –∫—Ä–∞—Å–Ω—ã–π
    case "done":    return "#06d6a0"; // –∑–µ–ª—ë–Ω—ã–π
    default:        return node.baseColor || "#9ba9bb"; // –±–∞–∑–æ–≤—ã–π —Å–µ—Ä—ã–π
  }
};

// ========================================================================
// üß† –≠–∫—Å–ø–æ—Ä—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ —É–∑–ª–∞–º –≥—Ä–∞—Ñ–∞ (–¥–ª—è office.js)
// ========================================================================
window.onGraphNodeClick = function onGraphNodeClick(node) {

  // –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ fillSidepanel
  if (typeof fillSidepanel === "function") {
    centerOnFolder(node.id, 1000);//  –∏–∑ brainstorm.js
    fillSidepanel(node);
  } else {
    console.warn("‚ö†Ô∏è fillSidepanel –Ω–µ –Ω–∞–π–¥–µ–Ω, –∫–ª–∏–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –±–µ–∑ –ø–∞–Ω–µ–ª–∏");
  }

  // –æ—Ç–º–µ—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —É–∑–µ–ª
  if (window.__OfficeGraph__) {
    window.__OfficeGraph__.selectedNodeId = node.id;
  }

  // –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ –≥—Ä–∞—Ñ–∞, —á—Ç–æ–±—ã –ø–æ–¥—Å–≤–µ—Ç–∫–∞ –ø—Ä–∏–º–µ–Ω—è–ª–∞—Å—å —Å—Ä–∞–∑—É
  const G = window.__OfficeGraph__?.Graph;
  if (G) G.graphData(G.graphData());

};

// === –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–∑—É–º ForceGraph –Ω–∞–≤—Å–µ–≥–¥–∞ ===
function disableForceGraphAutoZoom(Graph) {
  console.log('disableForceGraphAutoZoom')
   if (!Graph || Graph.__autoZoomPatched) return;

  const noop = () => {};
  // 1Ô∏è‚É£ –ì–ª—É—à–∏–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∞–≤—Ç–æ—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
  ['zoomToFit', 'fitToScene', '_updateScene'].forEach(fn => {
    if (typeof Graph[fn] === 'function') {
      Graph[`__orig_${fn}`] = Graph[fn];
      Graph[fn] = noop;
    }
  });

  // 2Ô∏è‚É£ –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π "center" force, —á—Ç–æ–±—ã –≥—Ä–∞—Ñ –Ω–µ —Å—Ç—è–≥–∏–≤–∞–ª—Å—è –∫ (0,0)
  try {
    const centerForce = Graph.d3Force('center');
    if (centerForce) Graph.d3Force('center', null);
  } catch (err) {
    console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª—é—á–∏—Ç—å d3Force(center):', err);
  }

  Graph.__autoZoomPatched = true;
  console.log('‚úÖ ForceGraph –∞–≤—Ç–æ-–∑—É–º –∏ –∞–≤—Ç–æ-—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω—ã');
}

// === üß† –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã ===
function setSystemStatus(state, message) {
  const bar = document.getElementById("system-status-bar");
  const text = document.getElementById("system-status-text");
  const icon = document.getElementById("system-status-icon");
  if (!bar || !text || !icon) return;

  bar.classList.remove("active", "busy", "error");

  switch (state) {
    case "busy":
      icon.textContent = "‚öôÔ∏è";
      text.textContent = message || "–ò–¥—ë—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏...";
      bar.classList.add("busy");
      break;
    case "error":
      icon.textContent = "‚ö†Ô∏è";
      text.textContent = message || "–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã";
      bar.classList.add("error");
      break;
    default:
      icon.textContent = "üß†";
      text.textContent = message || "–í—Å–µ –∞–≥–µ–Ω—Ç—ã –∞–∫—Ç–∏–≤–Ω—ã";
      bar.classList.add("active");
      break;
  }
}


