// ===============================
// AI –ú–µ–Ω–µ–¥–∂–µ—Ä ‚Äî –æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å
// ===============================
const AIManager = (() => {
  // ===============================
  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
  // ===============================
  const qs = (selector) => document.querySelector(selector);
  const qsa = (selector) => document.querySelectorAll(selector);

  const showMessage = (text, type = "info") => {
    const msgBox = qs("#folderMessage");
    if (!msgBox) return;
    msgBox.textContent = text;
    msgBox.className = type;
    setTimeout(() => (msgBox.textContent = ""), 1500); // –∏—Å—á–µ–∑–∞–µ—Ç —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
  };

  // ===============================
  // 1. –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞
  // ===============================
  const handleCreateFolder = async (e) => {
    e.preventDefault();
    const input = qs("#folderName");
    const name = input.value.trim();
    if (!name) return showMessage("‚ùó–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–∞—Ç–∞–ª–æ–≥–∞", "warn");

    const res = await fetch("/create_folder", {
      method: "POST",
      body: new URLSearchParams({ name }),
    });

    const data = await res.json();
    if (data.ok) {
      showMessage(`‚úÖ –ö–∞—Ç–∞–ª–æ–≥ '${name}' —Å–æ–∑–¥–∞–Ω`);
      renderFolder(name);
      addFolderToSelect(name);
      input.value = "";
    } else if (data.error === "exists") {
      showMessage("‚ö†Ô∏è –¢–∞–∫–æ–π –∫–∞—Ç–∞–ª–æ–≥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", "warn");
    } else {
      showMessage("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞", "error");
    }
  };

  // –î–æ–±–∞–≤–∏—Ç—å –≤ —Å–ø–∏—Å–æ–∫ —Å–µ–ª–µ–∫—Ç–æ–≤
  const addFolderToSelect = (name) => {
    const select = qs("#folder-select");
    if (!select) return;
    if ([...select.options].some((o) => o.value === name)) return;
    const opt = document.createElement("option");
    opt.value = name;
    opt.textContent = name;
    select.appendChild(opt);
  };

  // –û—Ç—Ä–∏—Å–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –±–ª–æ–∫ –∫–∞—Ç–∞–ª–æ–≥–∞
 const renderFolder = (name) => {
  const container = qs("#folders-container");
  if (!container) return;
  if (qs(`#folder-${name}`)) return; // —É–∂–µ –µ—Å—Ç—å

  const html = `
    <section id="folder-${name}" class="folder" data-folder="${name}">
      <div class="folder-header">
        <h2 class="folder-title" onclick="AIManager.toggleFolder('${name}')">üìÇ ${name}</h2>
        <div class="folder-actions">
          <button class="assign-btn" onclick="toggleTaskBox('{{ folder }}')">
            <i data-lucide="rocket"></i> –ó–∞–¥–∞—Ç—å –∑–∞–¥–∞—á—É
          </button>
          <button class="delete-folder-btn" onclick="AIManager.deleteFolder('${name}')">
            <i data-lucide="trash-2"></i> –£–¥–∞–ª–∏—Ç—å
          </button>
        </div>
      </div>
      <div class="task-box hidden" id="task-box-${name}">
        <textarea placeholder="–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∫–∞—Ç–∞–ª–æ–≥–∞ '${name}'..." id="task-input-${name}"></textarea>
        <button onclick="assignTaskToFolder('${name}')">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
      </div>
      <ul class="agents-list" id="agents-${name}" style="display:none;">
        <li><em>–ü–æ–∫–∞ –ø—É—Å—Ç–æ</em></li>
      </ul>
    </section>`;
  container.insertAdjacentHTML("afterbegin", html);
};

// === –ü–æ–∫–∞–∑ / —Å–∫—Ä—ã—Ç–∏–µ –ø–æ–ª—è –∑–∞–¥–∞—á–∏ ===
window.toggleTaskBox = (folder) => {
  const box = document.querySelector(`#task-box-${folder}`);
  if (!box) return;
  box.classList.toggle("hidden");
};

  // ===============================
  // 2. –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞
  // ===============================
  const handleCreateAgent = async (e) => {
    e.preventDefault();
    const form = e.target;
    const formData = new FormData(form);

    try {
      const res = await fetch("/create_agent", { method: "POST", body: formData });
      if (res.redirected || res.ok) {
        const folder = formData.get("folder") || "root";
        const name = formData.get("name");
        const slug = name.toLowerCase().replace(/[^a-z0-9_-]/g, "_");

        addAgentToFolder(folder, name, slug);
        addAgentCard(folder, name, slug);
        showMessage(`‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ '${name}' —Å–æ–∑–¥–∞–Ω`);
        form.reset();
      } else {
        showMessage("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–≥–µ–Ω—Ç–∞", "error");
      }
    } catch (err) {
      console.error(err);
      showMessage("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º", "error");
    }
  };

const addAgentToFolder = (folder, name, slug) => {
  const section = document.querySelector(`#folder-${folder} ul`);
  if (!section) return;

  const empty = section.querySelector("em");
  if (empty) empty.parentElement.remove();

  section.insertAdjacentHTML(
    "beforeend",
    `
    <li>
      ü§ñ <a href="/agent/${slug}" target="_blank">${name}</a>
      <button class="icon-btn delete-agent-btn"
              title="–£–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"
              onclick="AIManager.deleteAgent('${slug}', '${folder}')">
        <i data-lucide="trash-2"></i>
      </button>
    </li>`
  );

  // –ø–æ—Å–ª–µ –≤—Å—Ç–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫–∏
  if (window.lucide) lucide.createIcons();
};


 const addAgentCard = (folder, name, slug) => {
  const list = qs(".ai-agents ul") || createAgentsSection();
  const card = `
    <li class="agent-card" id="agent-card-${slug}">
      <div class="ai-agent-header">
        <h2>${name}</h2>
        <div class="agent-status" id="status-${slug}">–°—Ç–∞—Ç—É—Å: –ì–æ—Ç–æ–≤</div>
        <a href="/agent/${slug}" target="_blank" class="agent-link">üîó –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É</a>
      </div>

      <div style="display:inline;">
        <input type="hidden" name="slug" value="${slug}">
        <textarea name="task" class="task" id="task-${slug}" placeholder="–ó–∞–¥–∞—á–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞" required></textarea>
        <button type="submit" class="send-task-button" id="btn-${slug}" onclick="AIManager.assignTask('${slug}')">–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É</button>
        <div class="result markdown-body" id="result-${slug}"></div>
      </div>

      <form action="/delete_agent" method="post" style="display:inline;">
        <input type="hidden" name="slug" value="${slug}">
        <button type="submit" class="delete-agent-button">–£–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</button>
      </form>
    </li>`;
  if (folder === "root") list.insertAdjacentHTML("beforeend", card);
};

  const createAgentsSection = () => {
    const div = document.createElement("div");
    div.className = "ai-agents";
    div.innerHTML = "<ul></ul>";
    qs(".container").appendChild(div);
    return div.querySelector("ul");
  };

  // ===============================
  // 3. –£–¥–∞–ª–µ–Ω–∏–µ
  // ===============================
const deleteAgent = async (slug, folder) => {
  const li = document.querySelector(`#agents-${folder} li:has(a[href="/agent/${slug}"])`);
  if (!li) return;

  // –µ—Å–ª–∏ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
  if (li.querySelector(".confirm-delete")) return;

  // —Å–æ–∑–¥–∞—ë–º –±–ª–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
  const confirmBox = document.createElement("div");
  confirmBox.className = "confirm-delete";
  confirmBox.innerHTML = `
    <span>–£–¥–∞–ª–∏—Ç—å?</span>
    <button class="yes">–î–∞</button>
    <button class="no">–û—Ç–º–µ–Ω–∞</button>
  `;
  li.appendChild(confirmBox);

  const btnYes = confirmBox.querySelector(".yes");
  const btnNo = confirmBox.querySelector(".no");

  // === –ù–∞–∂–∞—Ç–∏–µ "–î–∞"
  btnYes.addEventListener("click", async () => {
    try {
      const res = await fetch("/delete_agent", {
        method: "POST",
        body: new URLSearchParams({ slug }),
      });
      const data = await res.json();
      if (!data.ok) throw new Error(data.error || "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è");

      // –ø–ª–∞–≤–Ω–æ–µ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ
      li.style.transition = "opacity 0.3s ease";
      li.style.opacity = "0";
      setTimeout(() => li.remove(), 300);

      showMessage(`üóëÔ∏è –°–æ—Ç—Ä—É–¥–Ω–∏–∫ '${slug}' —É–¥–∞–ª—ë–Ω`);
    } catch (err) {
      console.error(err);
      showMessage(`‚ùå ${err.message}`, "error");
    }
  });

  // === –ù–∞–∂–∞—Ç–∏–µ "–û—Ç–º–µ–Ω–∞"
  btnNo.addEventListener("click", () => confirmBox.remove());

  // –∞–≤—Ç–æ-—É–¥–∞–ª–µ–Ω–∏–µ –±–ª–æ–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ 3 —Å
  setTimeout(() => confirmBox.remove(), 3000);
};



  const deleteFolder = async (folder) => {
    if (!confirm(`–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥ '${folder}'? –û–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç.`)) return;
    const res = await fetch("/delete_folder", {
      method: "POST",
      body: new URLSearchParams({ name: folder }),
    });
    const data = await res.json();
    if (data.ok) {
      qs(`#folder-${folder}`)?.remove();
      showMessage(`‚úÖ –ö–∞—Ç–∞–ª–æ–≥ '${folder}' —É–¥–∞–ª—ë–Ω`);
    } else if (data.error === "not_empty") {
      showMessage(`‚ö†Ô∏è –ö–∞—Ç–∞–ª–æ–≥ –Ω–µ –ø—É—Å—Ç (${data.count})`);
    } else {
      showMessage(`‚ùå –û—à–∏–±–∫–∞: ${data.error}`, "error");
    }
  };

  // ===============================
  // 4. –†–∞—Å–∫—Ä—ã—Ç–∏–µ –∫–∞—Ç–∞–ª–æ–≥–æ–≤
  // ===============================
const toggleFolder = async (folder) => {
  const encoded = encodeURIComponent(folder);
  const list = document.getElementById(`agents-${folder}`);
  if (!list) return;

  // –°–∫—Ä—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∏
  document.querySelectorAll(".agents-list").forEach((ul) => (ul.style.display = "none"));
  list.style.display = "block";

  try {
    const res = await fetch(`/folder/${encoded}`);
    if (!res.ok) throw new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤");

    const agents = await res.json();
    list.innerHTML = "";

    if (!agents.length) {
      list.innerHTML = "<li><em>–ù–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.</em></li>";
      return;
    }

    agents.forEach((a) => {
      const li = document.createElement("li");
      li.innerHTML = `
        ü§ñ <a href="/agent/${a.slug}" target="_blank">${a.name}</a>
        <button class="icon-btn delete-agent-btn"
          onclick="AIManager.deleteAgent('${a.slug}', '${folder}')"
          title="–£–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞">
          <i data-lucide="trash-2"></i>
        </button>
      `;
      list.appendChild(li);
    });

    // –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∫–æ–Ω–∫–∏
    if (window.lucide) lucide.createIcons();
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ:", err);
    list.innerHTML = "<li><em>‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤</em></li>";
  }
};



const renderAgentsInSection = (agents) => {
  let ul = qs(".ai-agents ul");
  if (!ul) {
    const div = document.createElement("div");
    div.className = "ai-agents";
    div.innerHTML = "<ul></ul>";
    qs(".container").appendChild(div);
    ul = div.querySelector("ul");
  }

  ul.innerHTML = "";

  if (!agents.length) {
    ul.innerHTML = "<p><em>–ù–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.</em></p>";
    return;
  }

  for (const a of agents) {
    const last = a.last_task || {};
    const taskText = last.task ? last.task : "‚Äî";
    const resultHtml = last.result?.html || last.result || "‚Äî";

    const html = `
      <li class="agent-card" id="agent-card-${a.slug}">
        <div class="ai-agent-header">
          <h2>${a.name}</h2>
          <div class="agent-status" id="status-${a.slug}">–°—Ç–∞—Ç—É—Å: –ì–æ—Ç–æ–≤</div>
          <a href="/agent/${a.slug}" target="_blank" class="agent-link">üîó –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É</a>
        </div>

        <div class="task-input">
          <input type="hidden" name="slug" value="${a.slug}">
          <textarea name="task" id="task-${a.slug}" placeholder="–ó–∞–¥–∞—á–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞" required></textarea>
          <button type="submit" id="btn-${a.slug}" onclick="AIManager.assignTask('${a.slug}')">
            –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É
          </button>
        </div>

        <form action="/delete_agent" method="post" style="display:inline;">
          <input type="hidden" name="slug" value="${a.slug}">
          <button type="submit" class="delete-agent-button">–£–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</button>
        </form>

         <div class="last-task">
          <div class="task-header">
            <span>üìù –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–¥–∞—á–∞:</span>
          </div>
          <div class="result markdown-body">${resultHtml}</div>
        </div>
      </li>
    `;
    ul.insertAdjacentHTML("beforeend", html);
  }
};

  // ===============================
  // 5. –ü–æ—Ä—É—á–∏—Ç—å –∑–∞–¥–∞—á—É –∞–≥–µ–Ω—Ç—É
  // ===============================
  async function assignTask(slug) {
  const input = document.getElementById(`task-${slug}`);
  const task = input?.value.trim();
  if (!task) return alert("–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É");

  const card = document.querySelector(`#agent-card-${slug}`);
  const status = card.querySelector(".agent-status");
  const resultBox = card.querySelector(".result");
  const button = card.querySelector("button");

  // –û–±–Ω–æ–≤–ª—è–µ–º UI –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
  setSystemStatus("busy", "‚öôÔ∏è –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–¥–∞—á–∞...");
  button.disabled = true;
  status.textContent = "–°—Ç–∞—Ç—É—Å: ‚öôÔ∏è –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...";
  status.className = "agent-status running";
  resultBox.innerHTML = `<div class="spinner"></div> –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...`;

  try {
    const res = await fetch("/assign_task", {
      method: "POST",
      body: new URLSearchParams({ slug, task }),
    });
    const data = await res.json();

    if (!data.ok) throw new Error(data.error || "–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è");

    // üü¢ –£—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    status.textContent = "–°—Ç–∞—Ç—É—Å: ‚úÖ –ì–æ—Ç–æ–≤–æ";
    status.className = "agent-status done";
    resultBox.innerHTML = data.result?.html || data.result || "‚Äî";
    taskBox.textContent = `üß© –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–¥–∞—á–∞: ${task}`;
    resultBox.style.display = "block";

    // –í–∏–∑—É–∞–ª—å–Ω—ã–π –æ—Ç–∫–ª–∏–∫
    card.classList.add("done");
    setTimeout(() => card.classList.remove("done"), 1500);
    setSystemStatus("active", "üß† –í—Å–µ –∞–≥–µ–Ω—Ç—ã –∞–∫—Ç–∏–≤–Ω—ã");
  } catch (err) {
    console.error(err);
    status.textContent = "–°—Ç–∞—Ç—É—Å: ‚ùå –û—à–∏–±–∫–∞";
    status.className = "agent-status error";
    resultBox.textContent = err.message || "–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏";
    setSystemStatus("error", "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏");
  } finally {
    button.disabled = false;
  }
}


  // ===============================
// 6. –ü–æ—Ä—É—á–∏—Ç—å –∑–∞–¥–∞—á—É –≤—Å–µ–º—É –∫–∞—Ç–∞–ª–æ–≥—É
// ===============================
// ===============================
// 6. –ü–æ—Ä—É—á–∏—Ç—å –∑–∞–¥–∞—á—É –≤—Å–µ–º—É –∫–∞—Ç–∞–ª–æ–≥—É (—Å –∞–Ω–∏–º–∞—Ü–∏–µ–π)
// ===============================
// === üß© –ü–æ—Ä—É—á–∏—Ç—å –∑–∞–¥–∞—á—É –≤—Å–µ–º—É –∫–∞—Ç–∞–ª–æ–≥—É ===
async function assignTaskToFolder(folder) {
  const task = document.getElementById(`task-input-${folder}`)?.value.trim();
  if (!task) return alert("–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞");

  const button = document.querySelector(`#folder-${folder} .assign-btn`);
  const originalText = button.textContent;
  button.disabled = true;
  button.textContent = "‚öôÔ∏è –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...";

  setSystemStatus("busy", `‚öôÔ∏è –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–¥–∞—á–∞ –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞ "${folder}"...`);

  // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ —ç—Ç–æ–º –∫–∞—Ç–∞–ª–æ–≥–µ
  const cards = Array.from(document.querySelectorAll(".agent-card"))
    .filter(c => c.dataset.folder === folder);

  // –í–∏–∑—É–∞–ª—å–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ —Å—Ç–∞—Ç—É—Å "–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è"
  for (const card of cards) {
    const status = card.querySelector(".agent-status");
    const resultBox = card.querySelector(".result");
    if (status) {
      status.textContent = "–°—Ç–∞—Ç—É—Å: ‚öôÔ∏è –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...";
      status.className = "agent-status running";
    }
    if (resultBox) {
      resultBox.innerHTML = `<div class="spinner"></div> –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...`;
      resultBox.style.display = "block";
    }
  }

  try {
    const res = await fetch("/assign_task_folder", {
      method: "POST",
      body: new URLSearchParams({ folder, task }),
    });
    const data = await res.json();

    if (!data.ok) throw new Error(data.error || "–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è");

    // üß© –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–∞–∂–¥–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    for (const { agent, result } of data.results) {
      const card = document.querySelector(`#agent-card-${agent}`);
      if (!card) continue;

      const status = card.querySelector(".agent-status");
      const resultBox = card.querySelector(".result");

      status.textContent = "–°—Ç–∞—Ç—É—Å: ‚úÖ –ì–æ—Ç–æ–≤–æ";
      status.className = "agent-status done";
      resultBox.innerHTML = result?.html || result || "‚Äî";
      resultBox.style.display = "block";

      // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é –≤—Å–ø—ã—à–∫—É —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
      card.classList.add("done");
      setTimeout(() => card.classList.remove("done"), 1500);
    }

    setSystemStatus("active", "üß† –í—Å–µ –∞–≥–µ–Ω—Ç—ã –∞–∫—Ç–∏–≤–Ω—ã");
  } catch (err) {
    console.error(err);
    setSystemStatus("error", "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –∫–∞—Ç–∞–ª–æ–≥–∞");
  } finally {
    button.disabled = false;
    button.textContent = originalText;
  }
}

// === üß† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Ö–Ω–∏–º —Å—Ç–∞—Ç—É—Å-–±–∞—Ä–æ–º ===
function setSystemStatus(state, message) {
  const bar = document.getElementById("system-status-bar");
  const text = document.getElementById("system-status-text");
  const icon = document.getElementById("system-status-icon");
  if (!bar || !text || !icon) return;

  bar.classList.remove("active", "busy", "error");

  switch (state) {
    case "busy":
      icon.textContent = "‚öôÔ∏è";
      text.textContent = message || "–ò–¥—ë—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏...";
      bar.classList.add("busy");
      break;
    case "error":
      icon.textContent = "‚ö†Ô∏è";
      text.textContent = message || "–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã";
      bar.classList.add("error");
      break;
    case "active":
    default:
      icon.textContent = "üß†";
      text.textContent = message || "–í—Å–µ –∞–≥–µ–Ω—Ç—ã –∞–∫—Ç–∏–≤–Ω—ã";
      bar.classList.add("active");
      break;
  }
}


  // ===============================
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  // ===============================
  const init = () => {
    qs("#folderForm")?.addEventListener("submit", handleCreateFolder);
  };

  return { init, toggleFolder, deleteAgent, deleteFolder, assignTask, assignTaskToFolder, setSystemStatus };
})();

// === –ó–∞–ø—É—Å–∫ ===
document.addEventListener('DOMContentLoaded', () => {
  AIManager.init
  if (window.lucide) lucide.createIcons();
});

// === –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ===
// === –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ===
document.addEventListener("DOMContentLoaded", () => {
  const modal = document.getElementById("agent-modal");
  const openBtn = document.getElementById("open-agent-modal");
  const closeBtn = document.getElementById("close-agent-modal");
  const form = document.getElementById("create-agent-form");
  const nameInput = document.getElementById("agent-name");
  const errorBox = document.getElementById("agent-name-error");

  // –æ—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª–∫—É
  openBtn?.addEventListener("click", () => {
    modal.style.display = "flex";
    refreshFolderSelect();
  });

  // –∑–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª–∫—É
  closeBtn?.addEventListener("click", () => {
    modal.style.display = "none";
    form.reset();
    clearError();
  });

  // –∫–ª–∏–∫ –ø–æ —Ñ–æ–Ω—É ‚Äî –∑–∞–∫—Ä—ã—Ç—å
  modal?.addEventListener("click", (e) => {
    if (e.target === modal) {
      modal.style.display = "none";
      form.reset();
      clearError();
    }
  });

  // –û—á–∏—Å—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –≤–≤–æ–¥–µ
  nameInput.addEventListener("input", () => {
    clearError();
  });

  function showError(msg) {
    nameInput.classList.add("input-error");
    errorBox.textContent = msg;
  }

  function clearError() {
    nameInput.classList.remove("input-error");
    errorBox.textContent = "";
  }

  // === –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∞–≥–µ–Ω—Ç ===
  async function agentExists(name) {
    try {
      const res = await fetch("/agents");
      if (!res.ok) return false;
      const agents = await res.json();
      return agents.some(a => a.name.toLowerCase() === name.toLowerCase());
    } catch {
      return false;
    }
  }

  // === –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã ===
form?.addEventListener("submit", async (e) => {
    e.preventDefault();
    clearError();

    const formData = new FormData(form);
    const name = formData.get("name").trim();
    const folder = formData.get("folder");
    const msgBox = document.getElementById("agent-message");

    msgBox.style.display = "none";
    msgBox.className = "form-message"; // —Å–±—Ä–æ—Å —Ü–≤–µ—Ç–∞

    if (!name) {
      showError("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞");
      return;
    }

    // üîπ –ë—ã—Å—Ç—Ä–∞—è –ª–æ–∫–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (–≤ –ø–∞–º—è—Ç–∏)
    const existing = document.querySelectorAll(".agent-card h2");
    if ([...existing].some(h2 => h2.textContent.trim().toLowerCase() === name.toLowerCase())) {
      showError("‚ö†Ô∏è –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ –µ—Å—Ç—å –≤ —ç—Ç–æ–º –∫–∞—Ç–∞–ª–æ–≥–µ");
      return;
    }

    try {
      // üîπ –û–¥–∏–Ω –∑–∞–ø—Ä–æ—Å ‚Äî –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
      const res = await fetch("/create_agent", { method: "POST", body: formData });
      const data = await res.json();

      // üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞
      if (!data.ok) {
        const errorText = data.error?.includes("—Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
          ? "‚ö†Ô∏è –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
          : data.error || "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞";

        msgBox.textContent = errorText;
        msgBox.classList.add("error");
        msgBox.style.display = "block";
        return;
      }

      // ‚úÖ –£—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ
      msgBox.textContent = `‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ "${name}" —Å–æ–∑–¥–∞–Ω –≤ –∫–∞—Ç–∞–ª–æ–≥–µ "${folder}"`;
      msgBox.classList.add("success");
      msgBox.style.display = "block";

      // –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã
      form.reset();
      clearError();

      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–∞–ª–æ–≥
      await AIManager.toggleFolder(folder);

      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É —á–µ—Ä–µ–∑ 1.5 —Å–µ–∫
      setTimeout(() => {
        modal.style.display = "none";
        msgBox.style.display = "none";
      }, 1500);
    } catch (err) {
      console.error(err);
      msgBox.textContent = "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É";
      msgBox.classList.add("error");
      msgBox.style.display = "block";
    }
  });


});


 async function refreshFolderSelect() {
    console.log('refreshFolderSelect')
    try {
      const res = await fetch("/folders");
      if (!res.ok) throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–∞–ª–æ–≥–æ–≤");
      const folders = await res.json();
      const select = document.getElementById("folder-select");
      if (!select) {
        console.warn("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç #folder-select");
        return;
      }

      select.innerHTML = folders
        .map(f => `<option value="${f}">${f}</option>`)
        .join("");
    } catch (e) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–∞–ª–æ–≥–æ–≤:", e);
    }
}

// =============== –í–ò–†–¢–£–ê–õ–¨–ù–´–ô –û–§–ò–°: ForceGraph ===============
// === üß© –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤ –∏–∑ –≤—Å–µ—Ö –∫–∞—Ç–∞–ª–æ–≥–æ–≤ ===
async function fetchAgentsForOffice() {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–∞–ø–æ–∫
    const resFolders = await fetch("/folders");
    if (!resFolders.ok) throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥–∏");
    const folders = await resFolders.json(); // ['root', 'demo', 'research', ...]

    const agents = [];
    // –ü–æ–æ—á–µ—Ä–µ–¥–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –∞–≥–µ–Ω—Ç–æ–≤ –∏–∑ –∫–∞–∂–¥–æ–π –ø–∞–ø–∫–∏
    for (const folder of folders) {
      try {
        const res = await fetch(`/folder/${folder}`);
        if (!res.ok) continue;
        const list = await res.json();
        for (const a of list) {
          a.folder = folder; // –ø–æ–º–µ—á–∞–µ–º, –∏–∑ –∫–∞–∫–æ–π –ø–∞–ø–∫–∏
          agents.push(a);
        }
      } catch (e) {
        console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ ${folder}:`, e);
      }
    }

    console.log("‚úÖ –í—Å–µ–≥–æ –∞–≥–µ–Ω—Ç–æ–≤:", agents.length);
    return agents;
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤:", err);
    return [];
  }
}

function buildGraphData(agents) {
  // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–∞–ø–∫–∏
  const folderSet = new Set(agents.map(a => a.folder || "root"));

  const folderNodes = Array.from(folderSet).map((f, i) => ({
    id: `folder:${f}`,
    label: f,
    type: "folder",
    folder: f,
    // üìç—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –ø–∞–ø–æ–∫ (—Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –≤ –∫—Ä—É–≥)
    fx: 250 * Math.cos((i / folderSet.size) * 2 * Math.PI),
    fy: 250 * Math.sin((i / folderSet.size) * 2 * Math.PI)
  }));

  const agentNodes = agents.map(a => ({
    id: a.slug,
    label: a.name,
    type: "agent",
    folder: a.folder || "root",
    status: a.status || "done",
    last_task: a.last_task || null,
  }));

  agentNodes.forEach(a => {
    const style = getAgentStyle(a);
    a.baseColor = style.color; // üîπ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ü–≤–µ—Ç
  });

  // –°–≤—è–∑–∏ –∞–≥–µ–Ω—Ç ‚Üí –µ–≥–æ –ø–∞–ø–∫–∞
  const links = agentNodes.map(a => ({
    source: a.id,
    target: `folder:${a.folder}`
  }));

  return { nodes: [...folderNodes, ...agentNodes], links };
}



function colorByStatus(node) {
  console.log('node',node)
  if (node.type === "folder") return "#48cae4";

  // üîπ –ï—Å–ª–∏ –∞–≥–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞—á—É
  if (node.status === "running") return "#ffd166";

  // üîπ –ï—Å–ª–∏ –æ—à–∏–±–∫–∞
  if (node.status === "error") return "#ef476f";

  // üîπ –ï—Å–ª–∏ –∞–≥–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–∏–ª –∑–∞–¥–∞—á—É
  if (node.status === "done") return "#08f070ff"; // –∑–µ–ª—ë–Ω—ã–π

  // üîπ –ï—Å–ª–∏ –∞–≥–µ–Ω—Ç –ø—Ä–æ—Å—Ç–æ ‚Äú–∞–∫—Ç–∏–≤–µ–Ω‚Äù, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –±–∞–∑–æ–≤—ã–π —Ü–≤–µ—Ç (–ø–æ —Ä–æ–ª–∏)
  return node.baseColor || "#9ba9bb";
}


let currentNode = null;

function fillSidepanel(node) {
  const title = document.getElementById("sp-title");
  const meta  = document.getElementById("sp-meta");
  const last  = document.getElementById("sp-last");
  // const lastTask = document.getElementById("sp-last-task");
  const lastRes  = document.getElementById("sp-last-result");
  const actions = document.getElementById("sp-actions");
  const folderActions = document.getElementById("sp-folder-actions");
  const folderResults = document.getElementById("sp-folder-results");
  const sendBtn = document.getElementById("sp-send");
  const sendFolderBtn = document.getElementById("sp-folder-send");

  title.textContent = node.label || "–£–∑–µ–ª";
  title.dataset.slug = (node.type === "agent") ? node.id : "";

  meta.innerHTML = `
    <div>–¢–∏–ø: <b>${node.type === "folder" ? "–ö–∞—Ç–∞–ª–æ–≥" : "–°–æ—Ç—Ä—É–¥–Ω–∏–∫"}</b></div>
    <div>–ì—Ä—É–ø–ø–∞: <b>${node.folder || "‚Äî"}</b></div>
    ${node.type === "agent" ? `<div>–°—Ç–∞—Ç—É—Å: <span class="status ${node.status || "done"}">${node.status || "‚Äî"}</span></div>` : ""}
  `;

  if (node.type === "agent") {
    // ==== –û–¥–∏–Ω–æ—á–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ ====
    console.log('node',node)
    const t = node.last_task?.task || "‚Äî";
    const r = node.last_task?.result?.html || node.last_task?.result || "‚Äî";
    last.style.display = "block";
    lastRes.style.display = "block";
    // lastTask.innerHTML = marked.parse(`üß© –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–¥–∞—á–∞:\n\n${t}`);
    lastRes.innerHTML = r;
    const showLink = document.getElementById("sp-show-result");
    if (r && r.trim() && r !== "‚Äî") {
      showLink.style.display = "inline-block";
      showLink.textContent = "üìä –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç";
      showLink.onclick = (e) => {
        e.preventDefault();
        showAgentResultBlock(node.label, r);
      };
    } else {
      showLink.style.display = "none";
    }
    // lastTask.textContent = `üß© –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–¥–∞—á–∞: ${t}`;
    
    actions.style.display = "flex";
    folderActions.style.display = "none";
    folderResults.style.display = "none";

    sendBtn.onclick = async () => {
      const task = (document.getElementById("sp-task")?.value || "").trim();
      if (!task) return alert("–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É");
      await assignTaskFromOffice(node.id, task);
    };
  } 
  else if (node.type === "folder") {
    actions.style.display = "none";
    last.style.display = "none";
    folderActions.style.display = "flex";
    folderResults.style.display = "none";

    // üß† –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é –º–æ–∑–≥–æ–≤–æ–≥–æ —à—Ç—É—Ä–º–∞
    const brainstormBox = document.getElementById("sp-brainstorm");
    if (brainstormBox) brainstormBox.style.display = "flex";

    sendFolderBtn.onclick = async () => {
      const task = (document.getElementById("sp-folder-task")?.value || "").trim();
      if (!task) return alert("–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞");
      await assignTaskToFolderFromOffice(node.folder, task);
    };

    const brainstormBtn = document.getElementById("sp-brainstorm-send");
    brainstormBtn.onclick = async () => {
      const topic = (document.getElementById("sp-brainstorm-topic")?.value || "").trim();
      if (!topic) return alert("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É —à—Ç—É—Ä–º–∞");
      await runBrainstormFromOffice(node.folder, topic);
    };
  }
  else {
    actions.style.display = "none";
    folderActions.style.display = "none";
    folderResults.style.display = "none";
    last.style.display = "none";
  }
}


function onGraphNodeClick(node) {
  fillSidepanel(node);
  // —Å–Ω–∏–º–∞–µ–º –ø—Ä–æ—à–ª–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ
  if (window.__OfficeGraph__) {
    window.__OfficeGraph__.selectedNodeId = node.id;
  }

  // üîÑ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞
  const G = window.__OfficeGraph__?.Graph;
  if (G) G.graphData(G.graphData());
}

// –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞—á–∏ –∏–∑ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
// === üß† –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞—á–∏ –∏–∑ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏ (office.html) ===
async function assignTaskFromOffice(slug, task) {
  const statusBlock = document.querySelector("#sp-meta");
  // const lastTask = document.querySelector("#sp-last-task");
  const resultBox = document.querySelector("#sp-last-result");

  setSystemStatus("busy", "‚öôÔ∏è –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–¥–∞—á–∞...");
  statusBlock.innerHTML += `<div><b>‚öôÔ∏è –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...</b></div>`;
  // lastTask.textContent = `üß© –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–¥–∞—á–∞: ${task}`;
  resultBox.innerHTML = `<div class="spinner"></div> –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...`;

  try {
    // –≤–∫–ª—é—á–∞–µ–º –º–∏–≥–∞–Ω–∏–µ
    window.__OfficeGraph__?.setAgentStatus(slug, "running");
    window.__OfficeGraph__?.refresh();

    const res = await fetch("/assign_task", {
      method: "POST",
      headers: { "Content-Type": "application/x-www-form-urlencoded" },
      body: new URLSearchParams({ slug, task }),
    });
    const data = await res.json();
    if (!data.ok) throw new Error(data.error || "–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è");

    window.__OfficeGraph__?.setAgentStatus(slug, "done", data.result?.html, task);
    window.__OfficeGraph__?.refresh();

    // ‚úÖ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∞–≤—É—é –ø–∞–Ω–µ–ª—å
    statusBlock.innerHTML = `
      <div>–¢–∏–ø: <b>–°–æ—Ç—Ä—É–¥–Ω–∏–∫</b></div>
      <div>–ö–∞—Ç–∞–ª–æ–≥: <b>${currentNode?.folder || "‚Äî"}</b></div>
      <div>–°—Ç–∞—Ç—É—Å: <b>‚úÖ –ì–æ—Ç–æ–≤–æ</b></div>
    `;
    // lastTask.textContent = `üß© –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–¥–∞—á–∞: ${task}`;
    resultBox.innerHTML = data.result?.html || data.result || "‚Äî";
    resultBox.scrollTop = resultBox.scrollHeight; // –∞–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑

    // –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–∑–ª–∞ –Ω–∞ –≥—Ä–∞—Ñ–µ
    window.__OfficeGraph__?.setAgentStatus(slug, "done", data.result?.html, task);
    setSystemStatus("active", "üß† –í—Å–µ –∞–≥–µ–Ω—Ç—ã –∞–∫—Ç–∏–≤–Ω—ã");
  } catch (err) {
    console.error(err);
    window.__OfficeGraph__?.setAgentStatus(slug, "error");
    window.__OfficeGraph__?.refresh();;
    resultBox.innerHTML = `<p class="error">‚ùå –û—à–∏–±–∫–∞: ${err.message}</p>`;
    window.__OfficeGraph__?.setAgentStatus(slug, "error");
    setSystemStatus("error", "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏");
  }
}

async function assignTaskToFolderFromOffice(folder, task) {
  const folderResults = document.getElementById("sp-folder-results");
  folderResults.style.display = "block";
  folderResults.innerHTML = `<div class="spinner"></div> ‚öôÔ∏è –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–¥–∞—á–∞ –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞ <b>${folder}</b>...`;

  setSystemStatus("busy", `‚öôÔ∏è –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞ "${folder}"`);

  // === üü° 1. –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è UI: –≤—Å–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –Ω–∞—á–∏–Ω–∞—é—Ç –º–∏–≥–∞—Ç—å ===
  try {
    const graphData = window.__OfficeGraph__?.Graph?.graphData();
    if (graphData) {
      for (const node of graphData.nodes) {
        if (node.type === "agent" && node.folder === folder) {
          window.__OfficeGraph__?.setAgentStatus(node.id, "running");
        }
      }
      window.__OfficeGraph__?.refresh(); // üîÑ –º–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ –≥—Ä–∞—Ñ–∞
    }
  } catch (err) {
    console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å—ã –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º:", err);
  }

  // === üß† 2. –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä ===
  try {
    const res = await fetch("/assign_task_folder", {
      method: "POST",
      headers: { "Content-Type": "application/x-www-form-urlencoded" },
      body: new URLSearchParams({ folder, task }),
    });
    const data = await res.json();
    if (!data.ok) throw new Error(data.error || "–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è");

    // === üß© 3. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ===
    let html = `<h4>üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</h4><ul style="list-style:none; padding-left:0;">`;
    for (const { agent, result } of data.results) {
      html += `
        <li style="margin:6px 0; padding:6px; border-bottom:1px solid rgba(255,255,255,0.1)">
          <b>${agent}</b>: ${result?.html || result || "‚Äî"}
        </li>`;
      // –æ–±–Ω–æ–≤–ª—è–µ–º —É–∑–ª—ã –≥—Ä–∞—Ñ–∞
      window.__OfficeGraph__?.setAgentStatus(agent, "done", result?.html, task);
    }
    html += `</ul>`;
    folderResults.innerHTML = html;

    setSystemStatus("active", "üß† –í—Å–µ –∞–≥–µ–Ω—Ç—ã –∞–∫—Ç–∏–≤–Ω—ã");
    window.__OfficeGraph__?.refresh();
  } catch (err) {
    console.error(err);
    folderResults.innerHTML = `<p class="error">‚ùå –û—à–∏–±–∫–∞: ${err.message}</p>`;
    setSystemStatus("error", "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –∫–∞—Ç–∞–ª–æ–≥–∞");
  }
}

async function runBrainstormFromOffice(folder, topic) {
  const progress = document.getElementById("sp-brainstorm-progress");
  const output = document.getElementById("sp-brainstorm-output");

  progress.style.width = "0%";
  output.style.display = "block";
  output.textContent = `üß† –ú–æ–∑–≥–æ–≤–æ–π —à—Ç—É—Ä–º –≤ –∫–∞—Ç–∞–ª–æ–≥–µ "${folder}" ‚Äî —Ç–µ–º–∞: "${topic}"\n\n`;
  setSystemStatus("busy", `üß† –ú–æ–∑–≥–æ–≤–æ–π —à—Ç—É—Ä–º: ${topic}`);

  const Graph = window.__OfficeGraph__?.Graph;
  const data = Graph?.graphData();
  const agents = data?.nodes.filter(n => n.type === "agent" && n.folder === folder) || [];
  const total = agents.length;

  if (total === 0) {
    output.textContent = "‚ö†Ô∏è –í –∫–∞—Ç–∞–ª–æ–≥–µ –Ω–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è —à—Ç—É—Ä–º–∞.";
    setSystemStatus("error", "–ù–µ—Ç –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è —à—Ç—É—Ä–º–∞");
    return;
  }

  try {
    // 1Ô∏è‚É£ –í—Å–µ –∞–≥–µ–Ω—Ç—ã –Ω–∞—á–∏–Ω–∞—é—Ç –º–∏–≥–∞—Ç—å
    agents.forEach(a => (a.status = "running"));
    Graph.graphData(data);

    let context = topic;
    const discussion = [];

    // 2Ô∏è‚É£ –ü–µ—Ä–µ–¥–∞—ë–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∞–≥–µ–Ω—Ç–∞–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
    for (let i = 0; i < agents.length; i++) {
      const currentAgent = agents[i];
      const nextAgent = agents[i + 1];
      const percent = Math.round(((i + 1) / total) * 100);
      progress.style.width = `${percent}%`;

      // ‚öôÔ∏è –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
      const res = await fetch("/assign_task", {
        method: "POST",
        headers: { "Content-Type": "application/x-www-form-urlencoded" },
        body: new URLSearchParams({
          slug: currentAgent.id,
          task: `–ü—Ä–æ–¥–æ–ª–∂–∏ –º–æ–∑–≥–æ–≤–æ–π —à—Ç—É—Ä–º –ø–æ —Ç–µ–º–µ "${topic}". –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞:\n\n${context}`
        }),
      });

      const json = await res.json();
      const responseText = json.result?.html || json.result || json.error || "(–Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞)";
      discussion.push({ agent: currentAgent.label, response: responseText });

      output.textContent += `üë§ ${currentAgent.label}:\n${responseText}\n\n`;

      // üîó –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–∏—é –ø–µ—Ä–µ–¥–∞—á–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
      if (nextAgent) {
        data.links.push({
          source: currentAgent.id,
          target: nextAgent.id,
          temp: true,
          transferProgress: 0
        });
        Graph.graphData(data);
        animateLinkTransfer(currentAgent.id, nextAgent.id);
      }

      // üü¢ –ê–≥–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–∏–ª ‚Äî –ø–µ—Ä–µ—Å—Ç–∞—ë—Ç –º–∏–≥–∞—Ç—å
      currentAgent.status = "done";
      Graph.nodeColor(colorByStatus); // üîπ –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å —Ü–≤–µ—Ç–∞
      Graph.graphData(data);

      // –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç —Å–ª–µ–¥—É—é—â–µ–º—É –∞–≥–µ–Ω—Ç—É
      context = responseText;

      await new Promise(r => setTimeout(r, 600));
    }

    // 3Ô∏è‚É£ –ü–æ—Å–ª–µ –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤ ‚Äî —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–æ–±—â–µ–Ω–∏–µ
    const summaryAgent = agents[0]; // –ø—É—Å—Ç—å –ø–µ—Ä–≤—ã–π –¥–µ–ª–∞–µ—Ç —Å–≤–æ–¥–∫—É
    const res = await fetch("/assign_task", {
      method: "POST",
      headers: { "Content-Type": "application/x-www-form-urlencoded" },
      body: new URLSearchParams({
        slug: summaryAgent.id,
        task: `–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –æ–±—â–∏–π –≤—ã–≤–æ–¥ –º–æ–∑–≥–æ–≤–æ–≥–æ —à—Ç—É—Ä–º–∞ –ø–æ —Ç–µ–º–µ "${topic}", –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ:\n\n${context}`
      }),
    });

    const summaryJson = await res.json();
    const summaryText = summaryJson.result?.html || summaryJson.result || summaryJson.error || "(–Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞)";
    output.textContent += "\n----------------------------------\n";
    output.textContent += `üß© –ò—Ç–æ–≥–æ–≤–æ–µ –º–Ω–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:\n${summaryText}\n`;

   // 4Ô∏è‚É£ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —à—Ç—É—Ä–º–∞ ‚Äî –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—Ç —Ü–≤–µ—Ç–æ–≤
    agents.forEach(a => (a.status = "done"));
    data.links = data.links.filter(l => !l.temp);
    Graph.nodeColor(colorByStatus);
    Graph.graphData(data);

    // —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É (0.5 —Å–µ–∫), –≤–µ—Ä–Ω—É—Ç—å —Ü–≤–µ—Ç–∞
    setTimeout(() => {
      agents.forEach(a => {
        a.status = null; // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è baseColor
      });
      Graph.graphData(data);
    }, 1000);

    // 5Ô∏è‚É£ –ö–Ω–æ–ø–∫–∞ ‚Äú–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã‚Äù
    const link = document.createElement("a");
    link.href = "#brainstorm-results-block";
    link.textContent = "üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã";
    link.style.display = "block";
    link.style.marginTop = "12px";
    link.style.cursor = "pointer";
    link.onclick = (e) => {
      e.preventDefault();
      showBrainstormResults(summaryText, discussion);
    };
    output.appendChild(link);

  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –º–æ–∑–≥–æ–≤–æ–≥–æ —à—Ç—É—Ä–º–∞:", err);
    output.textContent = `‚ùå –û—à–∏–±–∫–∞: ${err.message}`;
    progress.style.background = "#ef476f";
    setSystemStatus("error", "‚ùå –û—à–∏–±–∫–∞ –º–æ–∑–≥–æ–≤–æ–≥–æ —à—Ç—É—Ä–º–∞");
  }
}

function animateLinkTransfer(sourceId, targetId) {
  const Graph = window.__OfficeGraph__?.Graph;
  if (!Graph) return;
  const data = Graph.graphData();

  const link = data.links.find(l => l.source === sourceId && l.target === targetId && l.temp);
  if (!link) return;

  let startTime = Date.now();

  function update() {
    const elapsed = Date.now() - startTime;
    link.transferProgress = Math.min(elapsed / 700, 1); // 0 ‚Üí 1 –∑–∞ 0.7 —Å–µ–∫
    Graph.graphData(data);

    if (link.transferProgress < 1) {
      requestAnimationFrame(update);
    } else {
      // —É–±–∏—Ä–∞–µ–º –ª–∏–Ω–∏—é –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
      setTimeout(() => {
        data.links = data.links.filter(l => l !== link);
        Graph.graphData(data);
      }, 300);
    }
  }

  update();
}


function pulseBrainstormNetwork(folder) {
  const Graph = window.__OfficeGraph__?.Graph;
  if (!Graph) return null;
  const data = Graph.graphData();

  const agents = data.nodes.filter(n => n.type === "agent" && n.folder === folder);
  if (agents.length < 2) return null;

  // —Å–æ–∑–¥–∞—ë–º ‚Äú–≤–æ–ª–Ω—É‚Äù ‚Äî –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–≤—è–∑–∏ –∫–∞–∂–¥—ã–µ 400 –º—Å
  const intervalId = setInterval(() => {
    const a1 = agents[Math.floor(Math.random() * agents.length)];
    const a2 = agents[Math.floor(Math.random() * agents.length)];
    if (a1.id === a2.id) return;

    // –¥–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å–≤—è–∑—å
    data.links.push({ source: a1.id, target: a2.id, temp: true });
    Graph.graphData(data);

    // —á–µ—Ä–µ–∑ 300 –º—Å —É–¥–∞–ª—è–µ–º –µ—ë
    setTimeout(() => {
      data.links = data.links.filter(l => !l.temp);
      Graph.graphData(data);
    }, 300);
  }, 400);

  return intervalId; // —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
}



// === –ü–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ ===
setInterval(() => {
  const Graph = window.__OfficeGraph__?.Graph;
  if (Graph) Graph.graphData(Graph.graphData());
}, 250);

function showBrainstormResults(summary, discussion) {
  let resultsBlock = document.getElementById("brainstorm-results-block");

  if (!resultsBlock) {
    resultsBlock = document.createElement("section");
    resultsBlock.id = "brainstorm-results-block";
    resultsBlock.className = "panel";
    resultsBlock.style.marginTop = "40px";
    resultsBlock.innerHTML = `
      <h2>üß† –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–∑–≥–æ–≤–æ–≥–æ —à—Ç—É—Ä–º–∞</h2>
      <div id="brainstorm-discussion"></div>
      <div id="brainstorm-summary" style="margin-top:15px; font-weight:500;"></div>
    `;
    document.body.appendChild(resultsBlock);
  }

  const discEl = document.getElementById("brainstorm-discussion");
  const sumEl = document.getElementById("brainstorm-summary");

    // === –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –¥–∏–∞–ª–æ–≥–∞ ===
  discEl.classList.add("markdown-body");
  discEl.innerHTML = discussion
    .map(d => `<div class="agent-block"><p><b>${d.agent}</b>:</p><div>${marked.parse(d.response)}</div></div>`)
    .join("");

  // === –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ ===
  sumEl.classList.add("markdown-body");
  sumEl.innerHTML = marked.parse(summary || "_(–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)_");


  // –ø–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –±–ª–æ–∫—É
  resultsBlock.scrollIntoView({ behavior: "smooth" });
}

  function showAgentResultBlock(agentName, resultMarkdown) {
  let block = document.getElementById("agent-results-block");

  if (!block) {
    block = document.createElement("section");
    block.id = "agent-results-block";
    block.className = "panel";
    block.style.marginTop = "40px";
    block.innerHTML = `
      <h2>üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–≥–µ–Ω—Ç–∞</h2>
      <div id="agent-results-content" class="markdown-body"></div>
    `;
    document.body.appendChild(block);
  }

  const content = document.getElementById("agent-results-content");
  content.innerHTML = `
    <h3>${agentName}</h3>
    ${marked.parse(resultMarkdown)}
  `;

  // –ø–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –±–ª–æ–∫—É
  block.scrollIntoView({ behavior: "smooth" });
}



// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ñ–∏—Å–∞
// === üß© –ì—Ä–∞—Ñ: –∫–∞—Ç–∞–ª–æ–≥ –≤ —Ü–µ–Ω—Ç—Ä–µ –∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏-–≥–µ–∫—Å–∞–≥–æ–Ω—ã ===
async function loadOfficeGraph() {
  const el = document.getElementById("office-graph");
  if (!el) return;

  setSystemStatus("busy", "‚öôÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –æ—Ñ–∏—Å...");

  // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥–∏ –∏ –∞–≥–µ–Ω—Ç–æ–≤
  const foldersRes = await fetch("/folders");
  const folders = foldersRes.ok ? await foldersRes.json() : ["root"];
  const agents = [];

  for (const folder of folders) {
    const res = await fetch(`/folder/${folder}`);
    if (res.ok) {
      const list = await res.json();
      for (const a of list) {
        a.folder = folder;
        agents.push(a);
      }
    }
  }

  const nodes = [];
  const links = [];

  for (const f of folders) {
    nodes.push({ id: `folder:${f}`, type: "folder", label: f });
  }

  for (const a of agents) {
    nodes.push({
      id: a.slug,
      type: "agent",
      label: a.name,
      folder: a.folder,
      status: a.status || "done",
    });
    links.push({ source: a.slug, target: `folder:${a.folder}` });
  }

  const data = buildGraphData(agents);


  const Graph = ForceGraph()(el)
  .width(el.clientWidth)
  .height(600)
  .graphData(data)
  .nodeId("id")
  .nodeRelSize(8)
  .nodeVal(n => (n.type === "folder" ? 16 : 8))
  .nodeColor(colorByStatus)
  .nodeLabel(n => n.label)
  .linkColor(() => "rgba(100,200,255,0.2)")
  .linkDirectionalParticles(0)
  .linkCanvasObject((link, ctx, globalScale) => {
    const progress = link.transferProgress || 0;
    const src = link.source;
    const tgt = link.target;

    if (!src || !tgt) return;

    const x1 = src.x;
    const y1 = src.y;
    const x2 = tgt.x;
    const y2 = tgt.y;

    // –æ—Å–Ω–æ–≤–Ω–∞—è –ª–∏–Ω–∏—è
    ctx.strokeStyle = "rgba(100,200,255,0.15)";
    ctx.lineWidth = 1.5;
    ctx.beginPath();
    ctx.moveTo(x1, y1);
    ctx.lineTo(x2, y2);
    ctx.stroke();

    // === –≤–æ–ª–Ω–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ ===
    if (progress > 0 && progress < 1) {
      const cx = x1 + (x2 - x1) * progress;
      const cy = y1 + (y2 - y1) * progress;
      const gradient = ctx.createRadialGradient(cx, cy, 0, cx, cy, 8);
      gradient.addColorStop(0, "rgba(0,200,255,0.9)");
      gradient.addColorStop(1, "rgba(0,200,255,0)");
      ctx.fillStyle = gradient;
      ctx.beginPath();
      ctx.arc(cx, cy, 8, 0, 2 * Math.PI);
      ctx.fill();
    }
  })

  .d3Force("charge", d3.forceManyBody().strength(-200))
  .d3Force("center", null)
  .cooldownTicks(100)
  .onEngineStop(() => Graph.zoomToFit(400))
  .onNodeClick(n => onGraphNodeClick(n))
  .nodeCanvasObject((node, ctx, globalScale) => {
      const label = node.label;
      const fontSize = 10 / globalScale;
      const size = node.type === "folder" ?  34 : 16; //–†–∞–∑–º–µ—Ä –∫–∞—Ç–∞–ª–æ–≥–∞

      let color = "#00b4d8";
      let iconType = "folder";

      if (node.type === "agent") {
        const style = getAgentStyle(node);
        color = style.color;
        iconType = style.icon;
      }
      
      // –ü–ª–∞–≤–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ –ª–∏–Ω–µ–π–Ω—É—é –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—é
      // === –ü–ª–∞–≤–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ —Ü–≤–µ—Ç–∞ ===
      const startColor = node._colorTransition || node.baseColor || "#9ba9bb";
      const targetColor = color || "#06d6a0";

      node._colorTransition = lerpColor(startColor, targetColor, 0.15);
      ctx.strokeStyle = node._colorTransition;
      ctx.fillStyle = (node._colorTransition || "#9ba9bb") + "33";

      function lerpColor(a, b, amount) {
        // –µ—Å–ª–∏ –Ω–µ—Ç –æ–¥–Ω–æ–≥–æ –∏–∑ —Ü–≤–µ—Ç–æ–≤ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Ç–æ—Ä–æ–π
        if (!a) return b || "#06d6a0";
        if (!b) return a || "#06d6a0";

        // –µ—Å–ª–∏ –ø—Ä–∏—à–ª–∏ –Ω–µ HEX —Ü–≤–µ—Ç–∞ ‚Äî —Ç–æ–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Ç–æ—Ä–æ–π
        if (!a.startsWith("#") || !b.startsWith("#")) return b;

        const ah = parseInt(a.replace("#", ""), 16);
        const ar = ah >> 16, ag = (ah >> 8) & 0xff, ab = ah & 0xff;
        const bh = parseInt(b.replace("#", ""), 16);
        const br = bh >> 16, bg = (bh >> 8) & 0xff, bb = bh & 0xff;

        const rr = Math.round(ar + amount * (br - ar));
        const rg = Math.round(ag + amount * (bg - ag));
        const rb = Math.round(ab + amount * (bb - ab));

        return (
          "#" +
          (1 << 24 | (rr << 16) | (rg << 8) | rb)
            .toString(16)
            .slice(1)
        );
      }


      // === –®–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫ ===
      ctx.beginPath();
      for (let i = 0; i < 6; i++) {
        const angle = Math.PI / 3 * i + Math.PI / 6;
        const px = node.x + size * Math.cos(angle);
        const py = node.y + size * Math.sin(angle);
        if (i === 0) ctx.moveTo(px, py);
        else ctx.lineTo(px, py);
      }
      ctx.closePath();
      ctx.fillStyle = color + "33";
      ctx.fill();
      ctx.lineWidth = 2;
      ctx.strokeStyle = color;
      ctx.shadowColor = color;
      ctx.shadowBlur = 8;
      ctx.stroke();
      ctx.shadowBlur = 0;

      // === –ò–∫–æ–Ω–∫–∞ ===
      ctx.save();
      ctx.lineWidth = 1.6;
      ctx.strokeStyle = "#e0f7ff";
      ctx.fillStyle = "#e0f7ff";

      if (node.type === "folder") {
        // üë• ‚Äî –≥—Ä—É–ø–ø–∞ / –æ—Ç–¥–µ–ª
        ctx.beginPath();
        ctx.arc(node.x - 4, node.y - 2, 3, 0, 2 * Math.PI);
        ctx.arc(node.x + 4, node.y - 2, 3, 0, 2 * Math.PI);
        ctx.fill();
        ctx.beginPath();
        ctx.moveTo(node.x - 8, node.y + 4);
        ctx.lineTo(node.x + 8, node.y + 4);
        ctx.stroke();
      } else {
        // üë®‚Äçüíª / üé® / üß† / ‚öôÔ∏è ‚Äî –ø–æ —Ä–æ–ª–∏
        switch (iconType) {
          case "copywriter": // üë®‚Äçüíª ‚Äî –Ω–æ—É—Ç–±—É–∫ / tech
            ctx.beginPath();
            ctx.rect(node.x - 6, node.y, 12, 6);
            ctx.stroke();
            ctx.beginPath();
            ctx.moveTo(node.x - 5, node.y - 2);
            ctx.lineTo(node.x, node.y - 6);
            ctx.lineTo(node.x + 5, node.y - 2);
            ctx.stroke();
            break;

          case "designer": // üé® ‚Äî –ø–∞–ª–∏—Ç—Ä–∞
            ctx.beginPath();
            ctx.arc(node.x, node.y, 6, 0, 2 * Math.PI);
            ctx.stroke();
            ctx.beginPath();
            ctx.arc(node.x - 3, node.y - 2, 1, 0, 2 * Math.PI);
            ctx.arc(node.x + 2, node.y - 3, 1, 0, 2 * Math.PI);
            ctx.arc(node.x + 3, node.y + 2, 1, 0, 2 * Math.PI);
            ctx.arc(node.x - 2, node.y + 3, 1, 0, 2 * Math.PI);
            ctx.fill();
            break;

          case "analyst": // üß† ‚Äî –º–æ–∑–≥
            ctx.beginPath();
            ctx.arc(node.x - 3, node.y - 1, 3, 0, Math.PI * 2);
            ctx.arc(node.x + 3, node.y + 1, 3, 0, Math.PI * 2);
            ctx.stroke();
            break;

          case "manager": // ‚öôÔ∏è ‚Äî —à–µ—Å—Ç–µ—Ä—ë–Ω–∫–∞
            for (let i = 0; i < 8; i++) {
              const a = (i * Math.PI) / 4;
              const r1 = 3.5, r2 = 5.5;
              ctx.moveTo(node.x + r1 * Math.cos(a), node.y + r1 * Math.sin(a));
              ctx.lineTo(node.x + r2 * Math.cos(a), node.y + r2 * Math.sin(a));
            }
            ctx.stroke();
            ctx.beginPath();
            ctx.arc(node.x, node.y, 2.2, 0, 2 * Math.PI);
            ctx.fill();
            break;

          default: // üë§ –±–∞–∑–æ–≤—ã–π —Å–∏–ª—É—ç—Ç
            ctx.beginPath();
            ctx.arc(node.x, node.y - 5, 3, 0, 2 * Math.PI);
            ctx.fill();
            ctx.beginPath();
            ctx.moveTo(node.x - 5, node.y + 4);
            ctx.quadraticCurveTo(node.x, node.y + 8, node.x + 5, node.y + 4);
            ctx.stroke();
            break;
        }
      }
      ctx.restore();

      // === –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É–∑–ª–∞ ===
      if (window.__OfficeGraph__?.selectedNodeId === node.id) {
        ctx.beginPath();
        ctx.arc(node.x, node.y, size + 6, 0, 2 * Math.PI);
        ctx.fillStyle = "rgba(0,180,255,0.15)";
        ctx.fill();
        ctx.shadowColor = "#00b4ff";
        ctx.shadowBlur = 20;
        ctx.lineWidth = 2;
        ctx.strokeStyle = "#00b4ff";
        ctx.stroke();
        ctx.shadowBlur = 0;
      }

      // === –ú—è–≥–∫–æ–µ –º–∏–≥–∞–Ω–∏–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω—è—é—â–∏—Ö –∑–∞–¥–∞—á—É ===
      if (node.status === "running") {
        const t = (Date.now() - (node._pulsePhase || 0)) / 250;
        const pulse = 0.6 + 0.4 * Math.sin(t);
        ctx.beginPath();
        ctx.arc(node.x, node.y, size + 6 + 4 * pulse, 0, 2 * Math.PI);
        ctx.fillStyle = `rgba(0,180,255,${0.3 + 0.3 * pulse})`;
        ctx.fill();
      }


      // === –ü–æ–¥–ø–∏—Å—å ===
      ctx.font = `${fontSize}px Inter`;
      ctx.textAlign = "center";
      ctx.fillStyle = "#9ba9bb";
      ctx.fillText(label, node.x, node.y + size + 12);
    })
    window.__OfficeGraph__ = {
      Graph,
      selectedNodeId: null,
      setAgentStatus(slug, status, resultHtml, taskText) {
        const data = Graph.graphData();
        const node = data.nodes.find(n => n.id === slug);
        if (!node) return;

        node.status = status;
        if (taskText || resultHtml) {
          node.last_task = node.last_task || {};
          if (taskText) node.last_task.task = taskText;
          if (resultHtml) node.last_task.result = { html: resultHtml };
        }

        // üîÑ –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞
        Graph.graphData(Graph.graphData());
      },

      // üëá –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ö–µ–ª–ø–µ—Ä –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∞
      refresh() {
        Graph.graphData(Graph.graphData());
      }
    };


  setSystemStatus("active", "üß† –í—Å–µ –∞–≥–µ–Ω—Ç—ã –∞–∫—Ç–∏–≤–Ω—ã");

  window.addEventListener("resize", () => {
    Graph.width(el.clientWidth);
  });

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–∑–∏–∫–æ–π
  Graph.d3Force('charge').strength(-50);        // —Å–∏–ª—å–Ω–µ–µ –æ—Ç—Ç–∞–ª–∫–∏–≤–∞–Ω–∏–µ
  Graph.d3Force('link').distance(link => {       // –¥–ª–∏–Ω–∞ —Å–≤—è–∑–∏
    const src = link.source;
    return src.type === 'folder' ? 100 : 90;    // –ø–∞–ø–∫–∏ –¥–∞–ª—å—à–µ –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
  });
}


function getAgentStyle(agent) {
  // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚Äî –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É –Ω–µ–≥–æ
  if (agent.status === "running" || agent.status === "done" || agent.status === "error") {
    return { color: colorByStatus(agent), icon: agent.icon || "generic" };
  }

  // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –±–∞–∑–æ–≤—ã–π —Ü–≤–µ—Ç ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
  if (agent.baseColor) {
    return { color: agent.baseColor, icon: agent.icon || "generic" };
  }

  // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ ‚Äî –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–π —Ü–≤–µ—Ç –ø–æ —Ä–æ–ª–∏
  let color = "#9ba9bb";
  let icon = "generic";

  switch (agent.id) {
    case "copywriter": color = "#00e0ff"; icon = "copywriter"; break;
    case "designer":   color = "#ff80ed"; icon = "designer"; break;
    case "analyst":    color = "#ffd166"; icon = "analyst"; break;
    case "manager":    color = "#06d6a0"; icon = "manager"; break;
    case "strategist": color = "#8b80ff"; icon = "strategist"; break;
    default:           color = "#9ba9bb"; icon = "generic"; break;
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
  agent.baseColor = color;
  agent.icon = icon;

  return { color, icon };
}



setInterval(() => {
  const Graph = window.__OfficeGraph__?.Graph;
  if (Graph) Graph.graphData(Graph.graphData());
}, 120);

document.addEventListener("DOMContentLoaded", loadOfficeGraph);
document.addEventListener("DOMContentLoaded", refreshFolderSelect);
document.addEventListener("DOMContentLoaded", () => {
  if (window.lucide) lucide.createIcons();
  AIManager.init();
  refreshFolderSelect();
  loadOfficeGraph();
});
// ============= END ForceGraph =============

// –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä–æ–π —Ä–∞–∑–º–µ—Ç–∫–æ–π (inline onclick)
window.AIManager   = AIManager;
window.toggleFolder = AIManager.toggleFolder;
window.deleteFolder = AIManager.deleteFolder;
window.assignTask   = AIManager.assignTask;
window.deleteAgent  = AIManager.deleteAgent;
window.assignTaskToFolder = AIManager.assignTaskToFolder;
window.setSystemStatus = AIManager.setSystemStatus;
