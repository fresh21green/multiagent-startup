import os
import re
import base64
import logging
import requests
from fastapi import FastAPI, Request
from telegram import Update
from langchain_amvera import AmveraLLM
from dotenv import load_dotenv
from pathlib import Path

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
load_dotenv()

# --- –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ---
logger = logging.getLogger("agent")
logger.setLevel(logging.DEBUG)

log_dir = Path(__file__).parent
fh = logging.FileHandler(log_dir / "agent.log", encoding="utf-8")

fh.setFormatter(logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s"))
logger.addHandler(fh)

# --- –ö–û–ù–°–¢–ê–ù–¢–´ ---
AMVERA_API_KEY = os.getenv("AMVERA_API_KEY")
AMVERA_MODEL = os.getenv("AMVERA_MODEL", "gpt")

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–∞ –∏ –º–æ–¥–µ–ª–∏ ===
if not AMVERA_API_KEY:
    logger.warning("‚ö†Ô∏è AMVERA_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤ .env")
if not AMVERA_MODEL:
    AMVERA_MODEL = "gpt-4.1"


# –ó–¥–µ—Å—å –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–¥—Å—Ç–∞–≤–∏—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
TELEGRAM_TOKEN = globals().get("TELEGRAM_TOKEN", None)
TELEGRAM_API_URL = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}" if TELEGRAM_TOKEN else None

# –ü–æ–¥—Å–∫–∞–∑–∫–∞ (–ø—Ä–æ–º–ø—Ç) –∞–≥–µ–Ω—Ç–∞
PROMPT = """(–¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã)"""

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ---
app = FastAPI()
# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –º–æ–¥–µ–ª–∏: llama8b, llama70b, gpt-4.1, gpt-5
llm = AmveraLLM(model=AMVERA_MODEL, api_token=AMVERA_API_KEY)


# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

def send_message(chat_id: int, text: str, parse_mode="Markdown"):
    if not TELEGRAM_API_URL:
        # –õ–æ–≥–∏—Ä—É–µ–º, –Ω–æ –Ω–µ –ø–∞–¥–∞–µ–º
        logger.debug(f"[NoTelegram] -> {chat_id}: {text[:120]}")
        return
    try:
        payload = {"chat_id": chat_id, "text": text, "parse_mode": parse_mode}
        requests.post(f"{TELEGRAM_API_URL}/sendMessage", json=payload, timeout=30)
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Telegram-—Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


def process_llm_response(chat_id: int, response: str):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç LLM:
    - –≤—ã–¥–µ–ª—è–µ—Ç —Ç–µ–∫—Å—Ç, –∫–æ–¥, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–µ—Å–ª–∏ Telegram –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
    """
    pattern = re.compile(
        r"```(.*?)```|(https?://[^\s]+\.(?:png|jpg|jpeg|gif|webp))|(data:image[^\s]+)",
        re.DOTALL
    )

    last_end = 0
    for match in pattern.finditer(response):
        start, end = match.span()

        if start > last_end:
            text_chunk = response[last_end:start].strip()
            if text_chunk:
                send_message(chat_id, text_chunk)

        if match.group(1):  # –∫–æ–¥
            send_message(chat_id, f"```\n{match.group(1)}\n```")
        elif match.group(2):  # URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            send_message(chat_id, f"üñº {match.group(2)}")
        elif match.group(3):  # base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            send_message(chat_id, "üì∏ [–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ base64]")
        last_end = end

    if last_end < len(response):
        tail = response[last_end:].strip()
        if tail:
            send_message(chat_id, tail)


# === –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ===

def handle_task(task: str):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞—á—É –∞–≥–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ LLM Amvera.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.
    """
    if isinstance(task, str) and len(task) > 4000:
        task = task[-4000:]

    try:
        if not AMVERA_API_KEY:
            return "‚ö†Ô∏è –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç AMVERA_API_KEY. –£–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤ .env"

        if not task or not isinstance(task, str):
            return "‚ö†Ô∏è –û—à–∏–±–∫–∞: –ø—É—Å—Ç–∞—è –∑–∞–¥–∞—á–∞"

        query = (PROMPT or "") + "\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: " + task.strip()
        logger.info(f"–ó–∞–ø—Ä–æ—Å –∫ LLM: {query[:120]}...")

        # –û—Å–Ω–æ–≤–Ω–æ–π –≤—ã–∑–æ–≤ LLM
        if len(query) > 4000:
            logger.warning(f"‚ö†Ô∏è –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π ({len(query)} —Å–∏–º–≤–æ–ª–æ–≤) ‚Äî –æ–±—Ä–µ–∑–∞–µ–º –¥–æ 4000.")
            query = query[-4000:]
        resp = llm.invoke(query)
        

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if hasattr(resp, "content"):
            return resp.content
        elif isinstance(resp, dict) and "content" in resp:
            return resp["content"]
        elif isinstance(resp, str):
            return resp
        else:
            return str(resp)

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ LLM: {e}")
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}"


# === TELEGRAM WEBHOOK ===
@app.post("/webhook")
async def webhook(request: Request):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ Telegram-—Å–æ–æ–±—â–µ–Ω–∏—è."""
    try:
        data = await request.json()
        update = Update.de_json(data, None)
        if update.message and update.message.text:
            user_text = update.message.text
            chat_id = update.message.chat.id
            result = handle_task(user_text)
            process_llm_response(chat_id, result)
        return {"ok": True}
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ Webhook: {e}")
        return {"ok": False, "error": str(e)}
